/* unittests.cpp
Unit testing for outcomes
(C) 2013-2016 Niall Douglas http://www.nedproductions.biz/


Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

#define NANOSECONDS_PER_CPU_CYCLE (1000000000000ULL / 3700000000ULL)

#define _CRT_SECURE_NO_WARNINGS 1

#ifdef _MSC_VER
#pragma warning(disable : 4503)  // decorated name length exceeded
#endif

#define BOOST_CATCH_CUSTOM_MAIN_DEFINED
#include "../include/boost/outcome/bindlib/include/boost/test/unit_test.hpp"
#include "../include/boost/outcome/monad.hpp"
#include "../include/boost/outcome/spinlock.hpp"
#include "../include/boost/outcome/tribool.hpp"
#include "timing.h"

#include <algorithm>
#include <stdio.h>
#include <unordered_map>

#ifdef _MSC_VER
#define BOOST_OUTCOME_POSIX_OPEN ::_open
#include <io.h>
#else
#define BOOST_OUTCOME_POSIX_OPEN ::open
#include <fcntl.h>
#endif

#include "allocator_testing.hpp"

BOOST_AUTO_TEST_SUITE(all)

BOOST_AUTO_TEST_CASE(works / spinlock, "Tests that the spinlock works as intended")
{
  BOOST_OUTCOME_V1_NAMESPACE::spinlock<bool> lock;
  BOOST_REQUIRE(lock.try_lock());
  BOOST_REQUIRE(!lock.try_lock());
  lock.unlock();

  std::lock_guard<decltype(lock)> h(lock);
  BOOST_REQUIRE(!lock.try_lock());
}

BOOST_AUTO_TEST_CASE(works / spinlock / threaded, "Tests that the spinlock works as intended under threads")
{
  BOOST_OUTCOME_V1_NAMESPACE::spinlock<bool> lock;
  BOOST_OUTCOME_V1_NAMESPACE::atomic<size_t> gate(0);
#pragma omp parallel
  {
    ++gate;
  }
  size_t threads = gate;
  for(size_t i = 0; i < 1000; i++)
  {
    gate.store(threads);
    size_t locked = 0;
#pragma omp parallel for reduction(+ : locked)
    for(int n = 0; n < (int) threads; n++)
    {
      --gate;
      while(gate)
        ;
      locked += lock.try_lock();
    }
    BOOST_REQUIRE(locked == 1U);
    lock.unlock();
  }
}

BOOST_AUTO_TEST_CASE(works / spinlock / transacted, "Tests that the spinlock works as intended under transactions")
{
  BOOST_OUTCOME_V1_NAMESPACE::spinlock<bool> lock;
  BOOST_OUTCOME_V1_NAMESPACE::atomic<size_t> gate(0);
  size_t locked = 0;
#pragma omp parallel
  {
    ++gate;
  }
  size_t threads = gate;
#pragma omp parallel for
  for(int i = 0; i < (int) (1000 * threads); i++)
  {
    BOOST_BEGIN_TRANSACT_LOCK(lock) { ++locked; }
    BOOST_END_TRANSACT_LOCK(lock)
  }
  BOOST_REQUIRE(locked == 1000 * threads);
}

#if 0
template <bool tristate, class T> struct do_lock
{
  void operator()(T &lock) { lock.lock(); }
};
template <class T> struct do_lock<true, T>
{
  void operator()(T &lock)
  {
    int e = 0;
    lock.lock(e);
  }
};

template <class locktype> double CalculatePerformance(bool use_transact)
{
  locktype lock;
  BOOST_OUTCOME_V1_NAMESPACE::atomic<size_t> gate(0);
  struct
  {
    size_t value;
    char padding[64 - sizeof(size_t)];
  } count[64];
  memset(&count, 0, sizeof(count));
  usCount start, end;
#pragma omp parallel
  {
    ++gate;
  }
  size_t threads = gate;
  // printf("There are %u threads in this CPU\n", (unsigned) threads);
  start = GetUsCount();
#pragma omp parallel for
  for(int thread = 0; thread < threads; thread++)
  {
    --gate;
    while(gate)
      ;
    for(size_t n = 0; n < 10000000; n++)
    {
      if(use_transact)
      {
        BOOST_BEGIN_TRANSACT_LOCK(lock) { ++count[thread].value; }
        BOOST_END_TRANSACT_LOCK(lock)
      }
      else
      {
        do_lock<std::is_same<typename locktype::value_type, int>::value, locktype>()(lock);
        ++count[thread].value;
        lock.unlock();
      }
    }
  }
  end = GetUsCount();
  size_t increments = 0;
  for(size_t thread = 0; thread < threads; thread++)
  {
    BOOST_REQUIRE(count[thread].value == 10000000);
    increments += count[thread].value;
  }
  return increments / ((end - start) / 1000000000000.0);
}

BOOST_AUTO_TEST_CASE(performance / spinlock / binary, "Tests the performance of binary spinlocks")
{
  printf("\n=== Binary spinlock performance ===\n");
  typedef BOOST_OUTCOME_V1_NAMESPACE::spinlock<bool> locktype;
  printf("1. Achieved %lf transactions per second\n", CalculatePerformance<locktype>(false));
  printf("2. Achieved %lf transactions per second\n", CalculatePerformance<locktype>(false));
  printf("3. Achieved %lf transactions per second\n", CalculatePerformance<locktype>(false));
}

BOOST_AUTO_TEST_CASE(performance / spinlock / binary / transaction, "Tests the performance of binary spinlock transactions")
{
  printf("\n=== Transacted binary spinlock performance ===\n");
  typedef BOOST_OUTCOME_V1_NAMESPACE::spinlock<bool> locktype;
  printf("1. Achieved %lf transactions per second\n", CalculatePerformance<locktype>(true));
  printf("2. Achieved %lf transactions per second\n", CalculatePerformance<locktype>(true));
  printf("3. Achieved %lf transactions per second\n", CalculatePerformance<locktype>(true));
}

BOOST_AUTO_TEST_CASE(performance / spinlock / tristate, "Tests the performance of tristate spinlocks")
{
  printf("\n=== Tristate spinlock performance ===\n");
  typedef BOOST_OUTCOME_V1_NAMESPACE::spinlock<int> locktype;
  printf("1. Achieved %lf transactions per second\n", CalculatePerformance<locktype>(false));
  printf("2. Achieved %lf transactions per second\n", CalculatePerformance<locktype>(false));
  printf("3. Achieved %lf transactions per second\n", CalculatePerformance<locktype>(false));
}

BOOST_AUTO_TEST_CASE(performance / spinlock / tristate / transaction, "Tests the performance of tristate spinlock transactions")
{
  printf("\n=== Transacted tristate spinlock performance ===\n");
  typedef BOOST_OUTCOME_V1_NAMESPACE::spinlock<int> locktype;
  printf("1. Achieved %lf transactions per second\n", CalculatePerformance<locktype>(true));
  printf("2. Achieved %lf transactions per second\n", CalculatePerformance<locktype>(true));
  printf("3. Achieved %lf transactions per second\n", CalculatePerformance<locktype>(true));
}

BOOST_AUTO_TEST_CASE(performance / spinlock / pointer, "Tests the performance of pointer spinlocks")
{
  printf("\n=== Pointer spinlock performance ===\n");
  typedef BOOST_OUTCOME_V1_NAMESPACE::spinlock<BOOST_OUTCOME_V1_NAMESPACE::lockable_ptr<int>> locktype;
  printf("1. Achieved %lf transactions per second\n", CalculatePerformance<locktype>(false));
  printf("2. Achieved %lf transactions per second\n", CalculatePerformance<locktype>(false));
  printf("3. Achieved %lf transactions per second\n", CalculatePerformance<locktype>(false));
}

BOOST_AUTO_TEST_CASE(performance / spinlock / pointer / transaction, "Tests the performance of pointer spinlock transactions")
{
  printf("\n=== Transacted pointer spinlock performance ===\n");
  typedef BOOST_OUTCOME_V1_NAMESPACE::spinlock<BOOST_OUTCOME_V1_NAMESPACE::lockable_ptr<int>> locktype;
  printf("1. Achieved %lf transactions per second\n", CalculatePerformance<locktype>(true));
  printf("2. Achieved %lf transactions per second\n", CalculatePerformance<locktype>(true));
  printf("3. Achieved %lf transactions per second\n", CalculatePerformance<locktype>(true));
}

static double CalculateMallocPerformance(size_t size, bool use_transact)
{
  BOOST_OUTCOME_V1_NAMESPACE::spinlock<bool> lock;
  BOOST_OUTCOME_V1_NAMESPACE::atomic<size_t> gate(0);
  usCount start, end;
#pragma omp parallel
  {
    ++gate;
  }
  size_t threads = gate;
  // printf("There are %u threads in this CPU\n", (unsigned) threads);
  start = GetUsCount();
#pragma omp parallel for
  for(int n = 0; n < 10000000 * threads; n++)
  {
    void *p;
    if(use_transact)
    {
      BOOST_BEGIN_TRANSACT_LOCK(lock) { p = malloc(size); }
      BOOST_END_TRANSACT_LOCK(lock)
    }
    else
    {
      std::lock_guard<decltype(lock)> g(lock);
      p = malloc(size);
    }
    if(use_transact)
    {
      BOOST_BEGIN_TRANSACT_LOCK(lock) { free(p); }
      BOOST_END_TRANSACT_LOCK(lock)
    }
    else
    {
      std::lock_guard<decltype(lock)> g(lock);
      free(p);
    }
  }
  end = GetUsCount();
  BOOST_REQUIRE(true);
  //  printf("size=%u\n", (unsigned) map.size());
  return threads * 10000000 / ((end - start) / 1000000000000.0);
}

BOOST_AUTO_TEST_CASE(performance / malloc / transact / small, "Tests the transact performance of multiple threads using small memory allocations")
{
  printf("\n=== Small malloc transact performance ===\n");
  printf("1. Achieved %lf transactions per second\n", CalculateMallocPerformance(16, 1));
  printf("2. Achieved %lf transactions per second\n", CalculateMallocPerformance(16, 1));
  printf("3. Achieved %lf transactions per second\n", CalculateMallocPerformance(16, 1));
}

BOOST_AUTO_TEST_CASE(performance / malloc / transact / large, "Tests the transact performance of multiple threads using large memory allocations")
{
  printf("\n=== Large malloc transact performance ===\n");
  printf("1. Achieved %lf transactions per second\n", CalculateMallocPerformance(65536, 1));
  printf("2. Achieved %lf transactions per second\n", CalculateMallocPerformance(65536, 1));
  printf("3. Achieved %lf transactions per second\n", CalculateMallocPerformance(65536, 1));
}
#endif


BOOST_AUTO_TEST_CASE(works / tribool, "Tests that the tribool works as intended")
{
  using BOOST_OUTCOME_V1_NAMESPACE::tribool::tribool;
  auto t(tribool::true_), f(tribool::false_), o(tribool::other), u(tribool::unknown);
  BOOST_CHECK(true_(t));
  BOOST_CHECK(false_(f));
  BOOST_CHECK(other(o));
  BOOST_CHECK(t != f);
  BOOST_CHECK(t != o);
  BOOST_CHECK(f != o);
  BOOST_CHECK(o == u);
  BOOST_CHECK(~t == f);
  BOOST_CHECK(~f == t);
  BOOST_CHECK(~u == u);
  BOOST_CHECK((f & f) == f);
  BOOST_CHECK((f & t) == f);
  BOOST_CHECK((f & u) == f);
  BOOST_CHECK((u & u) == u);
  BOOST_CHECK((u & t) == u);
  BOOST_CHECK((t & t) == t);
  BOOST_CHECK((f | f) == f);
  BOOST_CHECK((f | u) == u);
  BOOST_CHECK((f | t) == t);
  BOOST_CHECK((u | u) == u);
  BOOST_CHECK((u | t) == t);
  BOOST_CHECK((t | t) == t);
  BOOST_CHECK(std::min(f, u) == f);
  BOOST_CHECK(std::min(f, t) == f);
  BOOST_CHECK(std::min(u, t) == u);
  BOOST_CHECK(std::min(t, t) == t);
  BOOST_CHECK(std::max(f, u) == u);
  BOOST_CHECK(std::max(f, t) == t);
  std::cout << "bool false is " << false << ", bool true is " << true << std::endl;
  std::cout << "tribool false is " << f << ", tribool unknown is " << u << ", tribool true is " << t << std::endl;
}

BOOST_AUTO_TEST_CASE(works / traits, "Tests that the traits work as intended")
{
  using namespace BOOST_OUTCOME_V1_NAMESPACE::traits;
  {
    int foo = 1;
    // Capturing lambdas
    auto a = [foo](int) -> int { return foo; };
    auto b = [foo](int &&) -> int { return foo; };
    auto c = [foo](const int &) -> int { return foo; };
    auto d = [foo](int &) -> int { return foo; };
    // std function (class with call operator)
    auto e = std::function<int(int)>();
    auto f = std::function<int(int &&)>();
    // plain old functions
    int (*g)(int) = [](int) -> int { return 5; };
    int (*h)(int &&) = [](int &&) -> int { return 5; };
    int (*i)(const int &) = [](const int &) -> int { return 5; };
    int (*j)(int &) = [](int &) -> int { return 5; };

    static_assert(callable_argument_traits<decltype(a), int>::valid, "callable not recognised as valid");
    static_assert(callable_argument_traits<decltype(b), int &&>::valid, "callable not recognised as valid");
    static_assert(callable_argument_traits<decltype(c), const int &>::valid, "callable not recognised as valid");
    static_assert(callable_argument_traits<decltype(d), int &>::valid, "callable not recognised as valid");
    static_assert(callable_argument_traits<decltype(e), int>::valid, "callable not recognised as valid");
    static_assert(callable_argument_traits<decltype(f), int &&>::valid, "callable not recognised as valid");
    static_assert(callable_argument_traits<decltype(g), int>::valid, "callable not recognised as valid");
    static_assert(callable_argument_traits<decltype(h), int &&>::valid, "callable not recognised as valid");
    static_assert(callable_argument_traits<decltype(i), const int &>::valid, "callable not recognised as valid");
    static_assert(callable_argument_traits<decltype(j), int &>::valid, "callable not recognised as valid");

    static_assert(!callable_argument_traits<decltype(a), int>::is_rvalue, "non-rvalue not recognised");
    static_assert(callable_argument_traits<decltype(b), int &&>::is_rvalue, "rvalue not recognised");
    static_assert(!callable_argument_traits<decltype(c), const int &>::is_rvalue, "non-rvalue not recognised");
    static_assert(!callable_argument_traits<decltype(d), int &>::is_rvalue, "non-rvalue not recognised");
    static_assert(!callable_argument_traits<decltype(e), int>::is_rvalue, "non-rvalue not recognised");
    static_assert(callable_argument_traits<decltype(f), int &&>::is_rvalue, "rvalue not recognised");
    static_assert(!callable_argument_traits<decltype(g), int>::is_rvalue, "non-rvalue not recognised");
    static_assert(callable_argument_traits<decltype(h), int &&>::is_rvalue, "rvalue not recognised");
    static_assert(!callable_argument_traits<decltype(i), const int &>::is_rvalue, "non-rvalue not recognised");
    static_assert(!callable_argument_traits<decltype(j), int &>::is_rvalue, "non-rvalue not recognised");

    static_assert(std::is_same<callable_argument_traits<decltype(a), int>::return_type, int>::value, "return type not deduced");
    static_assert(std::is_same<callable_argument_traits<decltype(b), int &&>::return_type, int>::value, "return type not deduced");
    static_assert(std::is_same<callable_argument_traits<decltype(c), const int &>::return_type, int>::value, "return type not deduced");
    static_assert(std::is_same<callable_argument_traits<decltype(d), int &>::return_type, int>::value, "return type not deduced");
    static_assert(std::is_same<callable_argument_traits<decltype(e), int>::return_type, int>::value, "return type not deduced");
    static_assert(std::is_same<callable_argument_traits<decltype(f), int &&>::return_type, int>::value, "return type not deduced");
    static_assert(std::is_same<callable_argument_traits<decltype(g), int>::return_type, int>::value, "return type not deduced");
    static_assert(std::is_same<callable_argument_traits<decltype(h), int &&>::return_type, int>::value, "return type not deduced");
    static_assert(std::is_same<callable_argument_traits<decltype(i), const int &>::return_type, int>::value, "return type not deduced");
    static_assert(std::is_same<callable_argument_traits<decltype(j), int &>::return_type, int>::value, "return type not deduced");
  }
#ifdef __cpp_generic_lambdas
  {
    int foo = 1;
    // Capturing lambdas with templated call functions
    auto a = [foo](auto) { return foo; };
    auto b = [foo](auto &&) { return foo; };
    auto c = [foo](const auto &) { return foo; };
    auto d = [foo](auto &) { return foo; };

    static_assert(callable_argument_traits<decltype(a), int>::valid, "callable not recognised as valid");
    static_assert(callable_argument_traits<decltype(b), int &&>::valid, "callable not recognised as valid");
    static_assert(callable_argument_traits<decltype(c), const int &>::valid, "callable not recognised as valid");
    static_assert(callable_argument_traits<decltype(d), int &>::valid, "callable not recognised as valid");

    static_assert(!callable_argument_traits<decltype(a), int>::is_rvalue, "non-rvalue not recognised");
    static_assert(callable_argument_traits<decltype(b), int &&>::is_rvalue, "rvalue not recognised");
    static_assert(!callable_argument_traits<decltype(c), const int &>::is_rvalue, "non-rvalue not recognised");
    static_assert(!callable_argument_traits<decltype(d), int &>::is_rvalue, "non-rvalue not recognised");

    static_assert(callable_argument_traits<decltype(a), int>::is_auto, "auto type not deduced");
    static_assert(callable_argument_traits<decltype(b), int &&>::is_auto, "auto type not deduced");
    static_assert(callable_argument_traits<decltype(c), const int &>::is_auto, "auto type not deduced");
    static_assert(callable_argument_traits<decltype(d), int &>::is_auto, "auto type not deduced");

    static_assert(std::is_same<callable_argument_traits<decltype(a), int>::return_type, int>::value, "return type not deduced");
    static_assert(std::is_same<callable_argument_traits<decltype(b), int &&>::return_type, int>::value, "return type not deduced");
    static_assert(std::is_same<callable_argument_traits<decltype(c), const int &>::return_type, int>::value, "return type not deduced");
    static_assert(std::is_same<callable_argument_traits<decltype(d), int &>::return_type, int>::value, "return type not deduced");
  }
#endif
}

BOOST_AUTO_TEST_CASE(works / monad, "Tests that the monad works as intended")
{
  using namespace BOOST_OUTCOME_V1_NAMESPACE;
  static_assert(std::is_constructible<outcome<long>, int>::value, "Sanity check that monad can be constructed from a value_type");
  static_assert(std::is_constructible<outcome<outcome<long>>, int>::value, "Sanity check that outer monad can be constructed from an inner monad's value_type");
  static_assert(!std::is_constructible<outcome<outcome<outcome<long>>>, int>::value, "Sanity check that outer monad can not be constructed from an inner inner monad's value_type");
  static_assert(!std::is_constructible<outcome<outcome<outcome<outcome<long>>>>, int>::value, "Sanity check that outer monad can not be constructed from an inner inner monad's value_type");

  static_assert(std::is_constructible<outcome<int>, outcome<long>>::value, "Sanity check that compatible monads can be constructed from one another");
  static_assert(!std::is_constructible<outcome<std::string>, outcome<int>>::value, "Sanity check that incompatible monads cannot be constructed from one another");
  // static_assert(!std::is_constructible<outcome<outcome<int>>, outcome<long>>::value, "Sanity check that incompatible monads cannot be constructed from one another");
  {
    outcome<int> m;
    BOOST_CHECK(!m);
    BOOST_CHECK(unknown(m));
    BOOST_CHECK(!m.is_ready());
    BOOST_CHECK(!m.has_value());
    BOOST_CHECK(!m.has_error());
    BOOST_CHECK(!m.has_exception());
    BOOST_CHECK_THROW(m.get(), monad_error);
    BOOST_CHECK_THROW(m.get_error(), monad_error);
    BOOST_CHECK_THROW(m.get_exception(), monad_error);
  }
  {
    outcome<void> m;
    BOOST_CHECK(!m);
    BOOST_CHECK(unknown(m));
    BOOST_CHECK(!m.is_ready());
    BOOST_CHECK(!m.has_value());
    BOOST_CHECK(!m.has_error());
    BOOST_CHECK(!m.has_exception());
    BOOST_CHECK_THROW(([&m]() -> void { return m.get(); }()), monad_error);
    BOOST_CHECK_THROW(m.get_error(), monad_error);
    BOOST_CHECK_THROW(m.get_exception(), monad_error);
  }
  {
    outcome<int> m(5);
    BOOST_CHECK(m);
    BOOST_CHECK(true_(m));
    BOOST_CHECK(m.is_ready());
    BOOST_CHECK(m.has_value());
    BOOST_CHECK(!m.has_error());
    BOOST_CHECK(!m.has_exception());
    BOOST_CHECK(m.get() == 5);
    m.get() = 6;
    BOOST_CHECK(m.get() == 6);
    BOOST_CHECK(!m.get_error());
    BOOST_CHECK(!m.get_exception());
    m.clear();
    BOOST_CHECK(!m);
    BOOST_CHECK(!m.is_ready());
    BOOST_CHECK(!m.has_value());
    BOOST_CHECK(!m.has_error());
    BOOST_CHECK(!m.has_exception());
    BOOST_CHECK_THROW(m.get(), monad_error);
    BOOST_CHECK_THROW(m.get_error(), monad_error);
    BOOST_CHECK_THROW(m.get_exception(), monad_error);
  }
  {
    outcome<std::string> m("niall");
    BOOST_CHECK(m);
    BOOST_CHECK(m.is_ready());
    BOOST_CHECK(m.has_value());
    BOOST_CHECK(!m.has_error());
    BOOST_CHECK(!m.has_exception());
    BOOST_CHECK(m.get() == "niall");
    m.get() = "NIALL";
    BOOST_CHECK(m.get() == "NIALL");
    auto temp(std::move(m).get());
    BOOST_CHECK(temp == "NIALL");
    BOOST_CHECK(m.get().empty());
    BOOST_CHECK(!m.get_error());
    BOOST_CHECK(!m.get_exception());
    m.clear();
    BOOST_CHECK(!m);
  }
  {
    outcome<void> m;
    m.set_value();
    BOOST_CHECK(m);
    BOOST_CHECK(true_(m));
    BOOST_CHECK(m.is_ready());
    BOOST_CHECK(m.has_value());
    BOOST_CHECK(!m.has_error());
    BOOST_CHECK(!m.has_exception());
    BOOST_CHECK_NO_THROW(m.get());  // works, but type returned is unusable
    BOOST_CHECK(!m.get_error());
    BOOST_CHECK(!m.get_exception());
    m.clear();
    BOOST_CHECK(!m);
    BOOST_CHECK(!m.is_ready());
    BOOST_CHECK(!m.has_value());
    BOOST_CHECK(!m.has_error());
    BOOST_CHECK(!m.has_exception());
    BOOST_CHECK_THROW(m.get(), monad_error);
    BOOST_CHECK_THROW(m.get_error(), monad_error);
    BOOST_CHECK_THROW(m.get_exception(), monad_error);
  }
  {
    error_code_extended ec(5, stl11::system_category());
    auto e = std::make_exception_ptr(stl11::system_error(ec));
    outcome<int> m(ec);
    BOOST_CHECK(!m);
    BOOST_CHECK(false_(m));
    BOOST_CHECK(m.is_ready());
    BOOST_CHECK(!m.has_value());
    BOOST_CHECK(m.has_error());
    BOOST_CHECK(m.has_exception());
    BOOST_CHECK_THROW(m.get(), stl11::system_error);
    BOOST_CHECK(m.get_error() == ec);
    BOOST_CHECK(m.get_exception());
    try
    {
      std::rethrow_exception(m.get_exception());
    }
    catch(const stl11::system_error &ex)
    {
      BOOST_CHECK(ex.code() == ec);
      BOOST_CHECK(ex.code().value() == 5);
    }
  }
  {
    auto e = std::make_exception_ptr(5);
    outcome<int> m(e);
    BOOST_CHECK(!m);
    BOOST_CHECK(false_(m));
    BOOST_CHECK(m.is_ready());
    BOOST_CHECK(!m.has_value());
    BOOST_CHECK(!m.has_error());
    BOOST_CHECK(m.has_exception());
    BOOST_CHECK_THROW(m.get(), int);
    BOOST_CHECK(m.get_error());
    BOOST_CHECK(m.get_exception() == e);
  }
}

BOOST_AUTO_TEST_CASE(works / monad / optional, "Tests that the monad acts as an optional R")
{
  using namespace BOOST_OUTCOME_V1_NAMESPACE;
  using BOOST_OUTCOME_V1_NAMESPACE::tribool::tribool;
  std::cout << "sizeof(outcome<bool>) = " << sizeof(outcome<bool>) << std::endl;
  std::cout << "sizeof(result<bool>) = " << sizeof(result<bool>) << std::endl;
  std::cout << "sizeof(option<bool>) = " << sizeof(option<bool>) << std::endl;
  std::cout << "sizeof(option<tribool>) = " << sizeof(option<tribool>) << std::endl;

  std::cout << "sizeof(outcome<bool>[2]) = " << sizeof(outcome<bool>[2]) << std::endl;
  std::cout << "sizeof(result<bool>[2]) = " << sizeof(result<bool>[2]) << std::endl;
  std::cout << "sizeof(option<bool>[2]) = " << sizeof(option<bool>[2]) << std::endl;
  std::cout << "sizeof(option<tribool>[2]) = " << sizeof(option<tribool>[2]) << std::endl;

  std::cout << "sizeof(option<void>) = " << sizeof(option<void>) << std::endl;
  std::cout << "sizeof(option<void>[2]) = " << sizeof(option<void>[2]) << std::endl;

  BOOST_CHECK(!(sizeof(outcome<bool>) & 3));
  BOOST_CHECK(sizeof(option<void>) <= 1U);
  BOOST_CHECK(sizeof(option<bool>) <= 1U);
  BOOST_CHECK(sizeof(option<tribool>) <= 2U);
  BOOST_CHECK(sizeof(option<void>[2]) <= 2U);
  BOOST_CHECK(sizeof(option<bool>[2]) <= 2U);
  BOOST_CHECK(sizeof(option<tribool>[2]) <= 4U);

  // Make sure the special compact bool storage works
  BOOST_CHECK(option<bool>(false).get() == false);
  BOOST_CHECK(option<bool>(true).get() == true);

  //! [optional_example]
  auto maybe_getenv = [](const char *n) -> option<const char *> {
    if(const char *x = std::getenv(n))
      return x;
    else
      return {};
  };
  auto a = maybe_getenv("SHOULDNEVEREXIST");
  BOOST_CHECK(!a);
  BOOST_CHECK_THROW(a.value(), monad_error);
  BOOST_CHECK(a.value_or(nullptr) == nullptr);
#ifdef _WIN32
  auto b = maybe_getenv("HOMEPATH");
#else
  auto b = maybe_getenv("HOME");
#endif
  BOOST_CHECK(b);
  std::cout << "$HOME=" << b.value() << std::endl;
  //! [optional_example]
}

BOOST_AUTO_TEST_CASE(works / monad / fileopen, "Tests that the monad semantically represents opening a file")
{
  using namespace BOOST_OUTCOME_V1_NAMESPACE;

  //! [monad_example]
  auto openfile = [](std::string path) noexcept->outcome<int>
  {
    int fd;
    while(-1 == (fd = BOOST_OUTCOME_POSIX_OPEN(path.c_str(), 0)) && EINTR == errno)
      ;
    try
    {
      if(-1 == fd)
      {
        int code = errno;
        // If a temporary failure, this is an expected unexpected outcome
        if(EBUSY == code || EISDIR == code || ELOOP == code || ENOENT == code || ENOTDIR == code || EPERM == code || EACCES == code)
          return error_code_extended(code, stl11::generic_category());

        // If a non-temporary failure, this is an unexpected outcome
        return std::make_exception_ptr(stl11::system_error(code, stl11::generic_category(), strerror(code)));
      }
      return fd;
    }
    catch(...)
    {
      // Any exception thrown is truly unexpected
      return std::current_exception();
    }
  };
  auto a = openfile("shouldneverexistnotever");
  BOOST_CHECK(!a);
  BOOST_CHECK(!a.empty());
  BOOST_CHECK(!a.has_value());
  BOOST_CHECK(a.has_exception());
  BOOST_CHECK(a.has_error());
  BOOST_CHECK(a.get_error() == error_code_extended(ENOENT, stl11::generic_category()));
  //! [monad_example]
}

BOOST_AUTO_TEST_CASE(works / monad / noexcept, "Tests that the monad correctly inherits noexcept from its type R")
{
  using namespace BOOST_OUTCOME_V1_NAMESPACE;
  {
    typedef outcome<int> type;
    std::cout << "outcome<int> is_nothrow_copy_constructible=" << type::is_nothrow_copy_constructible << std::endl;
    std::cout << "outcome<int> is_nothrow_move_constructible=" << type::is_nothrow_move_constructible << std::endl;
    std::cout << "outcome<int> is_nothrow_copy_assignable=" << type::is_nothrow_copy_assignable << std::endl;
    std::cout << "outcome<int> is_nothrow_move_assignable=" << type::is_nothrow_move_assignable << std::endl;
    std::cout << "outcome<int> is_nothrow_destructible=" << type::is_nothrow_destructible << std::endl;
    BOOST_CHECK(type::is_nothrow_copy_constructible == std::is_nothrow_copy_constructible<type>::value);
    BOOST_CHECK(type::is_nothrow_move_constructible == std::is_nothrow_move_constructible<type>::value);
    BOOST_CHECK(type::is_nothrow_copy_assignable == std::is_nothrow_copy_assignable<type>::value);
    BOOST_CHECK(type::is_nothrow_move_assignable == std::is_nothrow_move_assignable<type>::value);
// VS2015 is randomly flipping std::is_nothrow_destructible for outcome<int>. I'd assume memory corruption.
#ifndef _MSC_VER
    BOOST_CHECK(type::is_nothrow_destructible == std::is_nothrow_destructible<type>::value);
#endif
    BOOST_CHECK(true == std::is_nothrow_copy_constructible<type>::value);
    BOOST_CHECK(true == std::is_nothrow_move_constructible<type>::value);
    BOOST_CHECK(true == std::is_nothrow_copy_assignable<type>::value);
    BOOST_CHECK(true == std::is_nothrow_move_assignable<type>::value);
// VS2015 is randomly flipping std::is_nothrow_destructible for outcome<int>. I'd assume memory corruption.
#ifndef _MSC_VER
    BOOST_CHECK(true == std::is_nothrow_destructible<type>::value);
#endif
  }
  {
    typedef outcome<std::string> type;
    std::cout << "outcome<string> is_nothrow_copy_constructible=" << type::is_nothrow_copy_constructible << std::endl;
    std::cout << "outcome<string> is_nothrow_move_constructible=" << type::is_nothrow_move_constructible << std::endl;
    std::cout << "outcome<string> is_nothrow_copy_assignable=" << type::is_nothrow_copy_assignable << std::endl;
    std::cout << "outcome<string> is_nothrow_move_assignable=" << type::is_nothrow_move_assignable << std::endl;
    std::cout << "outcome<string> is_nothrow_destructible=" << type::is_nothrow_destructible << std::endl;
    BOOST_CHECK(type::is_nothrow_copy_constructible == std::is_nothrow_copy_constructible<type>::value);
    BOOST_CHECK(type::is_nothrow_move_constructible == std::is_nothrow_move_constructible<type>::value);
    BOOST_CHECK(type::is_nothrow_copy_assignable == std::is_nothrow_copy_assignable<type>::value);
    BOOST_CHECK(type::is_nothrow_move_assignable == std::is_nothrow_move_assignable<type>::value);
    BOOST_CHECK(type::is_nothrow_destructible == std::is_nothrow_destructible<type>::value);
    BOOST_CHECK(false == std::is_nothrow_copy_constructible<type>::value);
    BOOST_CHECK(true == std::is_nothrow_move_constructible<type>::value);
    BOOST_CHECK(false == std::is_nothrow_copy_assignable<type>::value);
    BOOST_CHECK(true == std::is_nothrow_move_assignable<type>::value);
    BOOST_CHECK(true == std::is_nothrow_destructible<type>::value);
  }
  {
    struct Except
    {
      int n;
      Except() = delete;
      Except(const Except &) noexcept(false) {}
      Except(Except &&) noexcept(false) {}
      ~Except() noexcept(false) {}
    };
    typedef outcome<Except> type;
    std::cout << "outcome<Except> is_nothrow_copy_constructible=" << type::is_nothrow_copy_constructible << std::endl;
    std::cout << "outcome<Except> is_nothrow_move_constructible=" << type::is_nothrow_move_constructible << std::endl;
    std::cout << "outcome<Except> is_nothrow_copy_assignable=" << type::is_nothrow_copy_assignable << std::endl;
    std::cout << "outcome<Except> is_nothrow_move_assignable=" << type::is_nothrow_move_assignable << std::endl;
    std::cout << "outcome<Except> is_nothrow_destructible=" << type::is_nothrow_destructible << std::endl;
    BOOST_CHECK(type::is_nothrow_copy_constructible == std::is_nothrow_copy_constructible<type>::value);
    BOOST_CHECK(type::is_nothrow_move_constructible == std::is_nothrow_move_constructible<type>::value);
    BOOST_CHECK(type::is_nothrow_copy_assignable == std::is_nothrow_copy_assignable<type>::value);
    BOOST_CHECK(type::is_nothrow_move_assignable == std::is_nothrow_move_assignable<type>::value);
    BOOST_CHECK(type::is_nothrow_destructible == std::is_nothrow_destructible<type>::value);
    BOOST_CHECK(false == std::is_nothrow_copy_constructible<type>::value);
    BOOST_CHECK(false == std::is_nothrow_move_constructible<type>::value);
    BOOST_CHECK(false == std::is_nothrow_copy_assignable<type>::value);
    BOOST_CHECK(false == std::is_nothrow_move_assignable<type>::value);
    BOOST_CHECK(false == std::is_nothrow_destructible<type>::value);
  }
}

BOOST_AUTO_TEST_CASE(works / monad / udts, "Tests that the monad works as intended with user-defined types")
{
  using namespace BOOST_OUTCOME_V1_NAMESPACE;
  // No default constructor, no copy/move, no assignment
  {
    struct udt
    {
      int a;
      udt(int _a)
          : a(_a)
      {
      }
      udt() = delete;
      udt(const udt &) = delete;
      udt(udt &&) = delete;
      udt &operator=(const udt &) = delete;
      udt &operator=(udt &&) = delete;
    };
    outcome<udt> foo(5);
    BOOST_CHECK(5 == foo.get().a);
  }
  // Emplace construct, throws during move and copy
  {
    struct udt
    {
      std::string a;
      udt(std::string _a)
          : a(_a)
      {
      }
      udt() = delete;
      udt(const udt &) { throw std::logic_error("copy"); }
      udt(udt &&) { throw std::logic_error("move"); }
      udt &operator=(const udt &) { throw std::logic_error("copy"); }
      udt &operator=(udt &&) { throw std::logic_error("move"); }
    };
    // Emplace constructs
    outcome<udt> foo("douglas");
    BOOST_CHECK("douglas" == foo.get().a);
    foo.emplace("niall");
    BOOST_CHECK("niall" == foo.get().a);
    try
    {
      auto foo2(foo);
      BOOST_CHECK(false);
    }
    catch(const std::logic_error &e)
    {
      BOOST_CHECK(!strcmp(e.what(), "copy"));
    }
    catch(...)
    {
      BOOST_CHECK(false);
    }
    BOOST_CHECK("niall" == foo.get().a);
    try
    {
      auto foo2(std::move(foo));
      BOOST_CHECK(false);
    }
    catch(const std::logic_error &e)
    {
      BOOST_CHECK(!strcmp(e.what(), "move"));
    }
    catch(...)
    {
      BOOST_CHECK(false);
    }
    BOOST_CHECK("niall" == foo.get().a);
    // Does throwing during copy assignment work?
    {
      outcome<udt> foo2("douglas");
      try
      {
        foo2 = foo;
        BOOST_CHECK(false);
      }
      catch(const std::logic_error &e)
      {
        BOOST_CHECK(!strcmp(e.what(), "copy"));
        BOOST_CHECK(foo2.empty());
      }
      catch(...)
      {
        BOOST_CHECK(false);
      }
      BOOST_CHECK("niall" == foo.get().a);
    }
    // Does throwing during move assignment work?
    {
      outcome<udt> foo2("douglas");
      try
      {
        foo2 = std::move(foo);
        BOOST_CHECK(false);
      }
      catch(const std::logic_error &e)
      {
        BOOST_CHECK(!strcmp(e.what(), "move"));
        BOOST_CHECK(foo2.empty());
      }
      catch(...)
      {
        BOOST_CHECK(false);
      }
      BOOST_CHECK("niall" == foo.get().a);
    }
  }
}

BOOST_AUTO_TEST_CASE(works / monad / void, "Tests that the monad works as intended with void")
{
  using namespace BOOST_OUTCOME_V1_NAMESPACE;
  // Can't construct a void
  {
    outcome<void> a, b(empty), c(value), d(make_ready_outcome<void>());
    BOOST_CHECK(a == b);
    BOOST_CHECK(c == d);
    BOOST_CHECK(a != c);
    BOOST_CHECK(b != c);
    BOOST_CHECK(a != d);
    BOOST_CHECK(b != d);
  }
}

BOOST_AUTO_TEST_CASE(works / monad / containers, "Tests that the monad works as intended inside containers")
{
  using namespace BOOST_OUTCOME_V1_NAMESPACE;
  std::vector<outcome<std::vector<int>>> vect;
  vect.push_back({5, 6, 7, 8});
  vect.push_back({1, 2, 3, 4});
  BOOST_REQUIRE(vect.size() == 2U);
  BOOST_CHECK(vect[0].get().size() == 4U);
  BOOST_CHECK(vect[1].get().size() == 4U);
  BOOST_CHECK(vect[0].get().front() == 5);
  BOOST_CHECK(vect[0].get().back() == 8);
  BOOST_CHECK(vect[1].get().front() == 1);
  BOOST_CHECK(vect[1].get().back() == 4);
}

BOOST_AUTO_TEST_CASE(works / monad / swap, "Tests that the monad swaps as intended")
{
  using namespace BOOST_OUTCOME_V1_NAMESPACE;
  outcome<std::string> a("niall"), b("douglas");
  BOOST_CHECK(a.get() == "niall");
  BOOST_CHECK(b.get() == "douglas");
  std::swap(a, b);
  BOOST_CHECK(a.get() == "douglas");
  BOOST_CHECK(b.get() == "niall");
  a.set_error(error_code_extended());
  std::swap(a, b);
  BOOST_CHECK(a.get() == "niall");
  BOOST_CHECK(b.get_error() == error_code_extended());
}

BOOST_AUTO_TEST_CASE(works / monad / serialisation, "Tests that the monad serialises and deserialises as intended")
{
  using namespace BOOST_OUTCOME_V1_NAMESPACE;
  outcome<std::string> a("niall"), b(error_code_extended(5, stl11::generic_category())), c(std::make_exception_ptr(std::ios_base::failure("A test failure message")));
  std::cout << "a contains " << a << " and b contains " << b << " and c contains " << c << std::endl;
  std::string buffer("hello");
  std::stringstream ss(buffer);
  ss >> a;
  BOOST_CHECK(a.get() == "hello");
}

BOOST_AUTO_TEST_CASE(works / monad / then, "Tests that the monad continues with next() as intended")
{
  using namespace BOOST_OUTCOME_V1_NAMESPACE;
  error_code_extended ec;
  outcome<std::string> a("niall"), b(ec);
  // Does auto unwrapping work?
  auto c(a.next([](outcome<std::string> v) { return v; }));
  BOOST_CHECK(c.get() == "niall");
  BOOST_CHECK(a.get() == "niall");
  // Does auto wrapping work?
  auto d(a.next([](outcome<std::string> &&) { return 5; }));
  BOOST_CHECK(d.get() == 5);
  BOOST_CHECK(a.get() == "niall");
#ifdef __cpp_generic_lambdas
  // Do auto lambdas work?
  auto e(a.next([](auto v) { return v; }));
  BOOST_CHECK(e.get() == "niall");
  BOOST_CHECK(a.get() == "niall");
#endif
  // Does error propagation work?
  auto f(b.next([](outcome<std::string> v) { return v; }));
  BOOST_CHECK(f.has_error());

  // Does automatic move semantics work?
  auto j(a.next([](outcome<std::string> &&v) { return std::move(v); }));
  BOOST_CHECK(j.get() == "niall");
  BOOST_CHECK(a.get().empty());
#ifdef __cpp_generic_lambdas
  // Does automatic move semantics with auto lambdas work?
  a.emplace("niall");
  auto k(a.next([](auto &&v) { return std::move(v); }));
  BOOST_CHECK(k.get() == "niall");
  BOOST_CHECK(a.get().empty());
#endif
}

#ifdef BOOST_OUTCOME_ENABLE_OPERATORS
BOOST_AUTO_TEST_CASE(works / monad / callable, "Tests that the monad works as intended holding callables")
{
  using namespace BOOST_OUTCOME_V1_NAMESPACE;
  auto a = make_outcome([](int a) { return 5 + a; });
  BOOST_CHECK(a.get()(1) == 6);
  BOOST_CHECK(a(2) == 7);
#ifdef __cpp_generic_lambdas
  auto b = make_outcome([](auto a) { return 5 + a; });
  BOOST_CHECK(b.get()(1) == 6);
  BOOST_CHECK(b(2) == 7);
#endif
}

BOOST_AUTO_TEST_CASE(works / monad / unwrap, "Tests that the monad unwraps as intended")
{
  using namespace BOOST_OUTCOME_V1_NAMESPACE;
  error_code_extended ec;
  outcome<std::string> a("niall"), b(ec);
  outcome<outcome<std::string>> c(std::move(a)), d(std::move(b));
  outcome<outcome<outcome<std::string>>> e(std::move(c)), f(std::move(d));
  outcome<outcome<outcome<outcome<std::string>>>> g(std::move(e)), h(std::move(f));
  auto i(g.unwrap()), j(h.unwrap());
  BOOST_CHECK((std::is_same<decltype(a), decltype(i)>::value));
  BOOST_CHECK((std::is_same<decltype(b), decltype(j)>::value));
  BOOST_CHECK(i.get() == "niall");
  BOOST_CHECK(j.get_error() == ec);
  BOOST_CHECK(g.get().get().get().get() == "niall");
  BOOST_CHECK(h.get().get().get().get_error() == ec);
  auto k(std::move(g).unwrap()), l(std::move(h).unwrap());
  BOOST_CHECK((std::is_same<decltype(a), decltype(k)>::value));
  BOOST_CHECK((std::is_same<decltype(b), decltype(l)>::value));
  BOOST_CHECK(k.get() == "niall");
  BOOST_CHECK(l.get_error() == ec);
  BOOST_CHECK(g.get().get().get().get().empty());
}

BOOST_AUTO_TEST_CASE(works / monad / bind, "Tests that the monad continues with bind() as intended")
{
  using namespace BOOST_OUTCOME_V1_NAMESPACE;
  error_code_extended ec;
  {
    outcome<std::string> a("niall"), b(ec);
    // Does bind work?
    auto c(a.bind([](std::string &&) { return 5; }));
    auto c2(a.bind([](std::string &&) -> outcome<int> { return 5; }));
    BOOST_CHECK(c.get() == 5);
    BOOST_CHECK(c2.get() == 5);
    BOOST_CHECK(a.get() == "niall");
    auto d(b.bind([](std::string &&) { return 5; }));
    auto d2(b.bind([](std::string &&) -> outcome<int> { return 5; }));
    BOOST_CHECK(d.has_error());
    BOOST_CHECK(d2.has_error());
#ifdef __cpp_generic_lambdas
    auto e(a.bind([](auto) { return 5; }));
    auto e2(a.bind([](auto) -> outcome<int> { return 5; }));
    BOOST_CHECK(e.get() == 5);
    BOOST_CHECK(e2.get() == 5);
    BOOST_CHECK(a.get() == "niall");
    auto f(b.bind([](auto) { return 5; }));
    auto f2(b.bind([](auto) -> outcome<int> { return 5; }));
    BOOST_CHECK(f.has_error());
    BOOST_CHECK(f2.has_error());
#endif
    auto g(a.bind([](std::string &&v) { return std::move(v); }));
    BOOST_CHECK(g.get() == "niall");
    BOOST_CHECK(a.get().empty());
    auto h(b.bind([](std::string &&v) { return std::move(v); }));
    BOOST_CHECK(h.has_error());
    a.emplace("niall");
#ifdef __cpp_generic_lambdas
    auto i(a.bind([](auto &&v) { return std::move(v); }));
    BOOST_CHECK(i.get() == "niall");
    BOOST_CHECK(a.get().empty());
    auto j(b.bind([](auto &&v) { return std::move(v); }));
    BOOST_CHECK(j.has_error());
    a.emplace("niall");
#endif

    // Does bind work with chains of value, error, exception and empty?
    auto x(a.bind([ec](std::string) { return ec; }).bind([](error_code_extended) { return std::make_exception_ptr(5); }).bind([](std::exception_ptr) { return; }).bind([](outcome<std::string>::empty_type) { return std::string("douglas"); }));
    BOOST_CHECK(x.get() == "douglas");
    auto y(a.bind([ec](std::string) -> outcome<int> { return ec; }).bind([](error_code_extended) { return std::make_exception_ptr(5); }).bind([](std::exception_ptr) { return; }).bind([](outcome<int>::empty_type) { return 5; }));
    BOOST_CHECK(y.get() == 5);
    auto z(a.bind([](std::string &&v) { return std::move(v); }).bind([](std::string &&v) { return std::move(v); }).bind([](std::string &&v) { return std::move(v); }).bind([](std::string &&v) { return std::move(v); }));
    BOOST_CHECK(z.get() == "niall");
    BOOST_CHECK(a.get().empty());
  }
}

BOOST_AUTO_TEST_CASE(works / monad / map, "Tests that the monad continues with map() as intended")
{
  using namespace BOOST_OUTCOME_V1_NAMESPACE;
  error_code_extended ec;
  {
    outcome<std::string> a("niall"), b(ec);
    // Does map work?
    auto c(a.map([](std::string &&) { return 5; }));
    auto c2(a.map([](std::string &&) -> outcome<int> { return 5; }));
    BOOST_CHECK(c.get() == 5);
    BOOST_CHECK(c2.get().get() == 5);
    BOOST_CHECK(a.get() == "niall");
    auto d(b.map([](std::string &&) { return 5; }));
    auto d2(b.map([](std::string &&) -> outcome<int> { return 5; }));
    BOOST_CHECK(d.has_error());
    BOOST_CHECK(d2.has_error());
#ifdef __cpp_generic_lambdas
    auto e(a.map([](auto) { return 5; }));
    auto e2(a.map([](auto) -> outcome<int> { return 5; }));
    BOOST_CHECK(e.get() == 5);
    BOOST_CHECK(e2.get().get() == 5);
    BOOST_CHECK(a.get() == "niall");
    auto f(b.map([](auto) { return 5; }));
    auto f2(b.map([](auto) -> outcome<int> { return 5; }));
    BOOST_CHECK(f.has_error());
    BOOST_CHECK(f2.has_error());
#endif
    auto g(a.map([](std::string &&v) { return std::move(v); }));
    BOOST_CHECK(g.get() == "niall");
    BOOST_CHECK(a.get().empty());
    auto h(b.map([](std::string &&v) { return std::move(v); }));
    BOOST_CHECK(h.has_error());
    a.emplace("niall");
#ifdef __cpp_generic_lambdas
    auto i(a.map([](auto &&v) { return std::move(v); }));
    BOOST_CHECK(i.get() == "niall");
    BOOST_CHECK(a.get().empty());
    auto j(b.map([](auto &&v) { return std::move(v); }));
    BOOST_CHECK(j.has_error());
    a.emplace("niall");
#endif

    // Does map work with chains of value, error, exception and empty?
    auto x(a.map([ec](std::string) { return ec; }).map([](error_code_extended) { return std::make_exception_ptr(5); }).map([](std::exception_ptr) { return; }).map([](outcome<std::string>::empty_type) { return std::string("douglas"); }));
    BOOST_CHECK(x.get() == "douglas");
    auto y(a
           .map([ec](std::string) -> outcome<long> { return ec; })
           // Type is now outcome<outcome<long>> where the inner monad is errored
           .map([](error_code_extended) { return std::make_exception_ptr(5); })
           .map([](std::exception_ptr) { return; })
           .map([](outcome<outcome<long>>::empty_type) -> outcome<long> { return 5; })
           // Type is now outcome<outcome<long>> where the inner monad is errored
           );
    // None of the above maps fire after the first as the first returns a outcome<outcome<int>>,
    // so it's always un-erroroed.
    BOOST_CHECK(y.has_value());
    BOOST_CHECK(y.unwrap().has_error());
    auto y2(a
            .map([ec](std::string) -> outcome<long> { return ec; })
            // Type is now outcome<outcome<long>>
            .map([](outcome<long> v) { return v.map([](error_code_extended) { return std::make_exception_ptr(5); }); })
            .map([](outcome<long> v) { return v.map([](std::exception_ptr) { return; }); })
            .map([](outcome<long> v) { return v.map([](outcome<long>::empty_type) { return 5L; }); }));
    BOOST_CHECK(y2.unwrap().get() == 5);
    auto z(a.map([](std::string &&v) { return std::move(v); }).map([](std::string &&v) { return std::move(v); }).map([](std::string &&v) { return std::move(v); }).map([](std::string &&v) { return std::move(v); }));
    BOOST_CHECK(z.get() == "niall");
    BOOST_CHECK(a.get().empty());
  }
}

BOOST_AUTO_TEST_CASE(works / monad / match, "Tests that the monad matches as intended")
{
  using namespace BOOST_OUTCOME_V1_NAMESPACE;
  //! [monad_match_example]
  struct o_type
  {
    int expected;
    // monad.match() will call an overload for each possible content it might have
    void operator()(int) const { BOOST_CHECK(expected == 1); }
    void operator()(error_code_extended) const { BOOST_CHECK(expected == 2); }
    void operator()(std::exception_ptr) const { BOOST_CHECK(expected == 3); }
    void operator()(outcome<int>::empty_type) const { BOOST_CHECK(expected == 4); }
    o_type()
        : expected(0)
    {
    }
  } o;
  error_code_extended ec;
  std::exception_ptr e;
  outcome<int> a(5);
  o.expected = 1;
  a.match(o);
  o.expected = 2;
  a = ec;
  a.match(o);
  o.expected = 3;
  a = e;
  a.match(o);
  o.expected = 4;
  a.clear();
  a.match(o);
  //! [monad_match_example]
}

BOOST_AUTO_TEST_CASE(works / monad / operators, "Tests that the monad custom operators work as intended")
{
  using namespace BOOST_OUTCOME_V1_NAMESPACE;
  //! [monad_operators_example]
  {
    error_code_extended ec;
    outcome<int> a(5);
    outcome<int> b(a & 6);   // a has a value, so become 6
    outcome<int> c(b | 4);   // b has a value, so remain at 6
    outcome<int> d(a & ec);  // a has a value, so become errored
    outcome<int> e(d & 2);   // d does not have a value, so remain errored
    outcome<int> f(d | 2);   // d does not have a value, so become 2
    BOOST_CHECK(b.get() == 6);
    BOOST_CHECK(c.get() == 6);
    BOOST_CHECK(d.has_error());
    BOOST_CHECK(e.has_error());
    BOOST_CHECK(f.get() == 2);
  }

  error_code_extended ec;
  {
    outcome<std::string> a("niall");
    // Does bind work with chains of value, error, exception and empty?
    auto x(a >> [ec](std::string) { return ec; } >> [](error_code_extended) { return std::make_exception_ptr(5); } >> [](std::exception_ptr) { return; } >> [](outcome<std::string>::empty_type) { return std::string("douglas"); });
    BOOST_CHECK(x.get() == "douglas");
    auto y(a >> [ec](std::string) -> outcome<int> { return ec; } >> [](error_code_extended) { return std::make_exception_ptr(5); } >> [](std::exception_ptr) { return; } >> [](outcome<int>::empty_type) { return 5; });
    BOOST_CHECK(y.get() == 5);
    auto z(a >> [](std::string &&v) { return std::move(v); } >> [](std::string &&v) { return std::move(v); } >> [](std::string &&v) { return std::move(v); } >> [](std::string &&v) { return std::move(v); });
    BOOST_CHECK(z.get() == "niall");
    BOOST_CHECK(a.get().empty());
  }
  //! [monad_operators_example]
}
#endif

BOOST_AUTO_TEST_SUITE_END()

#ifndef BOOST_MEMORY_TRANSACTIONS_DISABLE_CATCH
int main(int argc, char *argv[])
{
#ifdef _OPENMP
  printf("These unit tests have been compiled with parallel support. I will use as many threads as CPU cores.\n");
#else
  printf("These unit tests have not been compiled with parallel support and will execute only those which are sequential.\n");
#endif
#ifdef BOOST_HAVE_TRANSACTIONAL_MEMORY_COMPILER
  printf("These unit tests have been compiled using a transactional compiler. I will use __transaction_relaxed.\n");
#else
  printf("These unit tests have not been compiled using a transactional compiler.\n");
#endif
#if 0
  printf("Please attach debugger now ...\n");
  getchar();
#endif
#if 0
  cpu_set_t *cpuset=CPU_ALLOC(2);
  CPU_ZERO_S(CPU_ALLOC_SIZE(2), cpuset);
  CPU_SET_S(0, 2, cpuset);
  CPU_SET_S(1, 2, cpuset);
  pthread_setaffinity_np(pthread_self(), CPU_ALLOC_SIZE(2), cpuset);
#endif
  int result = Catch::Session().run(argc, argv);
  return result;
}
#endif
