/* unittests.cpp
Unit testing for memory transactions
(C) 2013-2015 Niall Douglas http://www.nedproductions.biz/


Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

#define _CRT_SECURE_NO_WARNINGS 1

#define BOOST_CATCH_CUSTOM_MAIN_DEFINED
#include "../include/boost/spinlock/spinlock.hpp"
#include "../include/boost/spinlock/bindlib/include/boost/test/unit_test.hpp"
#include "timing.h"
//#include "../include/boost/spinlock/concurrent_unordered_map.hpp"
#include "../include/boost/spinlock/future.hpp"

#include <stdio.h>
#include <unordered_map>
#include <algorithm>

#ifdef _MSC_VER
# define BOOST_SPINLOCK_POSIX_OPEN ::_open
# include <io.h>
#else
# define BOOST_SPINLOCK_POSIX_OPEN ::open
# include <fcntl.h>
#endif

#ifdef _MSC_VER
//#define BOOST_HAVE_SYSTEM_CONCURRENT_UNORDERED_MAP
#endif

#ifdef BOOST_HAVE_SYSTEM_CONCURRENT_UNORDERED_MAP
#include <concurrent_unordered_map.h>
#endif

#include "allocator_testing.hpp"

BOOST_AUTO_TEST_SUITE(all)

BOOST_AUTO_TEST_CASE(works/spinlock, "Tests that the spinlock works as intended")
{
  boost::spinlock::spinlock<bool> lock;
  BOOST_REQUIRE(lock.try_lock());
  BOOST_REQUIRE(!lock.try_lock());
  lock.unlock();
  
  std::lock_guard<decltype(lock)> h(lock);
  BOOST_REQUIRE(!lock.try_lock());
}

BOOST_AUTO_TEST_CASE(works/spinlock/threaded, "Tests that the spinlock works as intended under threads")
{
  boost::spinlock::spinlock<bool> lock;
  boost::spinlock::atomic<size_t> gate(0);
#pragma omp parallel
  {
    ++gate;
  }
  size_t threads=gate;
  for(size_t i=0; i<1000; i++)
  {
    gate.store(threads);
    size_t locked=0;
#pragma omp parallel for reduction(+:locked)
    for(int n=0; n<(int) threads; n++)
    {
      --gate;
      while(gate);
      locked+=lock.try_lock();
    }
    BOOST_REQUIRE(locked==1);
    lock.unlock();
  }
}

BOOST_AUTO_TEST_CASE(works/spinlock/transacted, "Tests that the spinlock works as intended under transactions")
{
  boost::spinlock::spinlock<bool> lock;
  boost::spinlock::atomic<size_t> gate(0);
  size_t locked=0;
#pragma omp parallel
  {
    ++gate;
  }
  size_t threads=gate;
#pragma omp parallel for
  for(int i=0; i<(int)(1000*threads); i++)
  {
    BOOST_BEGIN_TRANSACT_LOCK(lock)
    {
      ++locked;
    }
    BOOST_END_TRANSACT_LOCK(lock)
  }
  BOOST_REQUIRE(locked==1000*threads);
}

#if 0
template<bool tristate, class T> struct do_lock { void operator()(T &lock) { lock.lock(); } };
template<class T> struct do_lock<true, T> { void operator()(T &lock) { int e=0; lock.lock(e); } };

template<class locktype> double CalculatePerformance(bool use_transact)
{
  locktype lock;
  boost::spinlock::atomic<size_t> gate(0);
  struct
  {
    size_t value;
    char padding[64-sizeof(size_t)];
  } count[64];
  memset(&count, 0, sizeof(count));
  usCount start, end;
#pragma omp parallel
  {
    ++gate;
  }
  size_t threads=gate;
  //printf("There are %u threads in this CPU\n", (unsigned) threads);
  start=GetUsCount();
#pragma omp parallel for
  for(int thread=0; thread<threads; thread++)
  {
    --gate;
    while(gate);
    for(size_t n=0; n<10000000; n++)
    {
      if(use_transact)
      {
        BOOST_BEGIN_TRANSACT_LOCK(lock)
        {
          ++count[thread].value;
        }
        BOOST_END_TRANSACT_LOCK(lock)
      }
      else
      {
        do_lock<std::is_same<typename locktype::value_type, int>::value, locktype>()(lock);
        ++count[thread].value;
        lock.unlock();
      }
    }
  }
  end=GetUsCount();
  size_t increments=0;
  for(size_t thread=0; thread<threads; thread++)
  {
    BOOST_REQUIRE(count[thread].value == 10000000);
    increments+=count[thread].value;
  }
  return increments/((end-start)/1000000000000.0);
}

BOOST_AUTO_TEST_CASE(performance/spinlock/binary, "Tests the performance of binary spinlocks")
{
  printf("\n=== Binary spinlock performance ===\n");
  typedef boost::spinlock::spinlock<bool> locktype;
  printf("1. Achieved %lf transactions per second\n", CalculatePerformance<locktype>(false));
  printf("2. Achieved %lf transactions per second\n", CalculatePerformance<locktype>(false));
  printf("3. Achieved %lf transactions per second\n", CalculatePerformance<locktype>(false));
}

BOOST_AUTO_TEST_CASE(performance/spinlock/binary/transaction, "Tests the performance of binary spinlock transactions")
{
  printf("\n=== Transacted binary spinlock performance ===\n");
  typedef boost::spinlock::spinlock<bool> locktype;
  printf("1. Achieved %lf transactions per second\n", CalculatePerformance<locktype>(true));
  printf("2. Achieved %lf transactions per second\n", CalculatePerformance<locktype>(true));
  printf("3. Achieved %lf transactions per second\n", CalculatePerformance<locktype>(true));
}

BOOST_AUTO_TEST_CASE(performance/spinlock/tristate, "Tests the performance of tristate spinlocks")
{
  printf("\n=== Tristate spinlock performance ===\n");
  typedef boost::spinlock::spinlock<int> locktype;
  printf("1. Achieved %lf transactions per second\n", CalculatePerformance<locktype>(false));
  printf("2. Achieved %lf transactions per second\n", CalculatePerformance<locktype>(false));
  printf("3. Achieved %lf transactions per second\n", CalculatePerformance<locktype>(false));
}

BOOST_AUTO_TEST_CASE(performance/spinlock/tristate/transaction, "Tests the performance of tristate spinlock transactions")
{
  printf("\n=== Transacted tristate spinlock performance ===\n");
  typedef boost::spinlock::spinlock<int> locktype;
  printf("1. Achieved %lf transactions per second\n", CalculatePerformance<locktype>(true));
  printf("2. Achieved %lf transactions per second\n", CalculatePerformance<locktype>(true));
  printf("3. Achieved %lf transactions per second\n", CalculatePerformance<locktype>(true));
}

BOOST_AUTO_TEST_CASE(performance/spinlock/pointer, "Tests the performance of pointer spinlocks")
{
  printf("\n=== Pointer spinlock performance ===\n");
  typedef boost::spinlock::spinlock<boost::spinlock::lockable_ptr<int>> locktype;
  printf("1. Achieved %lf transactions per second\n", CalculatePerformance<locktype>(false));
  printf("2. Achieved %lf transactions per second\n", CalculatePerformance<locktype>(false));
  printf("3. Achieved %lf transactions per second\n", CalculatePerformance<locktype>(false));
}

BOOST_AUTO_TEST_CASE(performance/spinlock/pointer/transaction, "Tests the performance of pointer spinlock transactions")
{
  printf("\n=== Transacted pointer spinlock performance ===\n");
  typedef boost::spinlock::spinlock<boost::spinlock::lockable_ptr<int>> locktype;
  printf("1. Achieved %lf transactions per second\n", CalculatePerformance<locktype>(true));
  printf("2. Achieved %lf transactions per second\n", CalculatePerformance<locktype>(true));
  printf("3. Achieved %lf transactions per second\n", CalculatePerformance<locktype>(true));
}

static double CalculateMallocPerformance(size_t size, bool use_transact)
{
  boost::spinlock::spinlock<bool> lock;
  boost::spinlock::atomic<size_t> gate(0);
  usCount start, end;
#pragma omp parallel
  {
    ++gate;
  }
  size_t threads=gate;
  //printf("There are %u threads in this CPU\n", (unsigned) threads);
  start=GetUsCount();
#pragma omp parallel for
  for(int n=0; n<10000000*threads; n++)
  {
    void *p;
    if(use_transact)
    {
      BOOST_BEGIN_TRANSACT_LOCK(lock)
      {
        p=malloc(size);
      }
      BOOST_END_TRANSACT_LOCK(lock)
    }
    else
    {
      std::lock_guard<decltype(lock)> g(lock);
      p=malloc(size);
    }
    if(use_transact)
    {
      BOOST_BEGIN_TRANSACT_LOCK(lock)
      {
        free(p);
      }
      BOOST_END_TRANSACT_LOCK(lock)
    }
    else
    {
      std::lock_guard<decltype(lock)> g(lock);
      free(p);
    }
  }
  end=GetUsCount();
  BOOST_REQUIRE(true);
//  printf("size=%u\n", (unsigned) map.size());
  return threads*10000000/((end-start)/1000000000000.0);
}

BOOST_AUTO_TEST_CASE(performance/malloc/transact/small, "Tests the transact performance of multiple threads using small memory allocations")
{
  printf("\n=== Small malloc transact performance ===\n");
  printf("1. Achieved %lf transactions per second\n", CalculateMallocPerformance(16, 1));
  printf("2. Achieved %lf transactions per second\n", CalculateMallocPerformance(16, 1));
  printf("3. Achieved %lf transactions per second\n", CalculateMallocPerformance(16, 1));
}

BOOST_AUTO_TEST_CASE(performance/malloc/transact/large, "Tests the transact performance of multiple threads using large memory allocations")
{
  printf("\n=== Large malloc transact performance ===\n");
  printf("1. Achieved %lf transactions per second\n", CalculateMallocPerformance(65536, 1));
  printf("2. Achieved %lf transactions per second\n", CalculateMallocPerformance(65536, 1));
  printf("3. Achieved %lf transactions per second\n", CalculateMallocPerformance(65536, 1));
}
#endif





#if 0
BOOST_AUTO_TEST_CASE(works/concurrent_unordered_map/basic, "Tests that concurrent_unordered_map works as expected")
{
  printf("\n=== concurrent_unordered_map basic ===\n");
  boost::spinlock::concurrent_unordered_map<int, int> map1, map2;
  map1.reserve(10);    // test dense map
  map2.reserve(1000);  // test sparse map
  BOOST_CHECK(map1.empty());
  BOOST_CHECK(map2.empty());
  BOOST_CHECK(map1.size()==0);
  BOOST_CHECK(map2.size()==0);
  for(int n=-200; n<=200; n+=2)
  {
    map1.emplace(n, n);
    map2.emplace(n, n);
  }
  BOOST_CHECK(!map1.empty());
  BOOST_CHECK(!map2.empty());
  BOOST_CHECK(map1.size()==201);
  BOOST_CHECK(map2.size()==201);
  printf("Load factor for map1 is %f\n", map1.load_factor());
  printf("Load factor for map2 is %f\n", map2.load_factor());
  std::vector<std::pair<int, int>> contents1, contents2;
  std::copy(map1.begin(), map1.end(), std::back_inserter(contents1));
  std::copy(map2.begin(), map2.end(), std::back_inserter(contents2));
  BOOST_CHECK(contents1.size()==201);
  BOOST_CHECK(contents2.size()==201);
  std::sort(contents1.begin(), contents1.end());
  std::sort(contents2.begin(), contents2.end());
  for(int n=-200; n<=200; n+=2)
  {
    BOOST_CHECK(contents1[n/2+100].first==n);
    BOOST_CHECK(contents2[n/2+100].first==n);
  }
  map1.clear();
  map2.clear();
  BOOST_CHECK(map1.empty());
  BOOST_CHECK(map2.empty());
  BOOST_CHECK(map1.size()==0);
  BOOST_CHECK(map2.size()==0);
}

BOOST_AUTO_TEST_CASE(works/concurrent_unordered_map/rehash, "Tests that concurrent_unordered_map rehash works as expected")
{
  printf("\n=== concurrent_unordered_map rehash ===\n");
  boost::spinlock::concurrent_unordered_map<int, int> map1, map2;
  map1.reserve(10);    // test dense map
  map2.reserve(1000);  // test sparse map
  for(int n=-200; n<=200; n+=2)
  {
    map1.emplace(n, n);
    map2.emplace(n, n);
  }
  map1.reserve(1000);
  map2.reserve(10);
  std::vector<std::pair<int, int>> contents1, contents2;
  std::copy(map1.begin(), map1.end(), std::back_inserter(contents1));
  std::copy(map2.begin(), map2.end(), std::back_inserter(contents2));
  BOOST_CHECK(contents1.size()==201);
  BOOST_CHECK(contents2.size()==201);
  std::sort(contents1.begin(), contents1.end());
  std::sort(contents2.begin(), contents2.end());
  for(int n=-200; n<=200; n+=2)
  {
    BOOST_CHECK(contents1[n/2+100].first==n);
    BOOST_CHECK(contents2[n/2+100].first==n);
  }
}

BOOST_AUTO_TEST_CASE(works/concurrent_unordered_map/merge, "Tests that concurrent_unordered_map merge works as expected")
{
  printf("\n=== concurrent_unordered_map merge ===\n");
  boost::spinlock::concurrent_unordered_map<int, int> map1, map2={ { 0, 0 } };
  BOOST_CHECK(map1.size()==0);
  BOOST_CHECK(map2.size()==1);
  map1.reserve(10);    // test dense map
  map2.reserve(1000);  // test sparse map
  for(int n=-200; n<=200; n+=2)
  {
    map1.emplace(n, n);
    map2.emplace(n+1, n);
  }
  BOOST_CHECK(map1.size()==201);
  BOOST_CHECK(map2.size()==202);
  map1.merge(map2); // should merge all but 0
  std::vector<std::pair<int, int>> contents1, contents2;
  std::copy(map1.begin(), map1.end(), std::back_inserter(contents1));
  std::copy(map2.begin(), map2.end(), std::back_inserter(contents2));
  BOOST_CHECK(contents1.size()==402);
  BOOST_REQUIRE(contents2.size()==1);
  std::sort(contents1.begin(), contents1.end());
  BOOST_CHECK(contents2[0].first==0);
  for(int n=-200; n<=201; n++)
  {
    BOOST_CHECK(contents1[n+200].first==n);
  }
}

BOOST_AUTO_TEST_CASE(works/concurrent_unordered_map/operator[], "Tests that concurrent_unordered_map operator[] works as expected")
{
  printf("\n=== concurrent_unordered_map operator[] ===\n");
  boost::spinlock::concurrent_unordered_map<std::string, int> map;
  std::string key("niall");
  // const lvalue ref
  map[key]=4;
  BOOST_CHECK(map.size()==1);
  BOOST_CHECK(key=="niall");
  BOOST_CHECK(map[key]==4);
  BOOST_CHECK(map.size()==1);
  BOOST_CHECK(key=="niall");
  // rvalue ref
  map[std::move(key)]=5;
  BOOST_CHECK(map.size()==1);
  BOOST_CHECK(key=="");
  BOOST_CHECK(map["niall"]==5);
  BOOST_CHECK(map.size()==1);
  // collision
  auto n=map.extract("niall");
  BOOST_CHECK(map.size()==0);
  map["niall"]=4;
  BOOST_CHECK(map.size()==1);
  BOOST_CHECK(map["niall"]==4);
  auto outcome=map.insert(std::move(n));
  BOOST_CHECK(outcome.second==false);
  BOOST_CHECK(n);
  map.erase("niall");
  BOOST_CHECK(map.size()==0);
  outcome=map.insert(std::move(n));
  BOOST_CHECK(outcome.second==true);
  BOOST_CHECK(!n);
  BOOST_CHECK(map["niall"]==5);
  BOOST_CHECK(map.at("niall")==5);
  BOOST_CHECK_THROW(map.at("foo"), std::out_of_range);
}

BOOST_AUTO_TEST_CASE(works/concurrent_unordered_map/noalloc, "Tests that concurrent_unordered_map noalloc works as expected")
{
  printf("\n=== concurrent_unordered_map noalloc ===\n");
  boost::spinlock::concurrent_unordered_map<std::string, int> map(1); // no buckets
  // with node ptrs
  auto n=map.make_node_ptr(std::make_pair("niall", 4));
  auto outcome=map.insert_noalloc(std::move(n)); // fails
  BOOST_CHECK(outcome.second==false);
  BOOST_CHECK(map.size()==0);
  outcome=map.insert(std::move(n)); // succeeds
  BOOST_CHECK(outcome.second==true);
  BOOST_CHECK(map.size()==1);

  // with values
  outcome=map.insert_noalloc(std::make_pair("hello", 0));
  BOOST_CHECK(outcome.second==false);
  BOOST_CHECK(map.size()==1);

  // make an empty slot first  
  map.emplace("niall2", 5); // allocates
  BOOST_CHECK(map.size()==2);
  map.erase("niall"); // leaves empty slot, so a non-allocating insert should succeed now
  BOOST_CHECK(map.size()==1);
  outcome=map.insert_noalloc(std::make_pair("foo", 0));
  BOOST_CHECK(outcome.second==true);
  BOOST_CHECK(map.size()==2);
}

BOOST_AUTO_TEST_CASE(works/concurrent_unordered_map/make_node_ptrs, "Tests that concurrent_unordered_map make_node_ptrs works as expected")
{
  printf("\n=== concurrent_unordered_map make_node_ptrs ===\n");
  typedef boost::spinlock::concurrent_unordered_map<int, std::string> map_type;
  map_type map;
  std::vector<map_type::value_type> items;
  for(size_t n=0; n<100; n++)
    items.emplace_back(n, std::to_string(n));
  std::vector<map_type::node_ptr_type> n=map.make_node_ptrs(std::make_move_iterator(items.begin()), std::make_move_iterator(items.end()));
  for(auto &i : items)
  {
    BOOST_CHECK(i.second=="");
  }
  for(auto &i : n)
  {
    BOOST_CHECK(i);
    BOOST_CHECK(i->second!="");
  }
  map.insert(std::make_move_iterator(n.begin()), std::make_move_iterator(n.end()));
  for(auto &i : n)
  {
    BOOST_CHECK(!i);
  }
  for(size_t n=0; n<100; n++)
    BOOST_CHECK(map[n]==std::to_string(n));
  n=map.extract(map.begin(), map.end());
  BOOST_CHECK(map.empty());
  std::vector<map_type::value_type *> rawptrs;
  for(auto &i : n)
  {
    map_type::value_type *p=i.release();
    map.get_allocator().destroy(p);
    rawptrs.push_back(p);
  }
  items.clear();
  BOOST_CHECK(rawptrs.size()==100);
  for(size_t n=0; n<100; n++)
    items.emplace_back(n, std::to_string(n));
  n=map.make_node_ptrs(std::make_move_iterator(items.begin()), std::make_move_iterator(items.end()), rawptrs.data());
  map.insert(std::make_move_iterator(n.begin()), std::make_move_iterator(n.end()));
}

BOOST_AUTO_TEST_CASE(works/concurrent_unordered_map/exceptionsafety, "Tests that concurrent_unordered_map exception safety works as expected")
{
  printf("\n=== concurrent_unordered_map exception safety ===\n");
  auto &config=boost::allocator_testing::get_config(true);
  typedef boost::spinlock::concurrent_unordered_map<std::string, std::string, std::hash<std::string>, std::equal_to<std::string>, boost::allocator_testing::allocator<std::pair<const std::string, std::string>, std::allocator<std::pair<const std::string, std::string>>>> map_type;
  map_type map(1); // no buckets
  // fail first allocation
  config.fail_from=(size_t) config.count;
  BOOST_CHECK_THROW(map.insert(std::make_pair("niall", "niall")), std::bad_alloc);

  // failed insert doesn't destroy value
  {
    map_type::value_type v=std::make_pair("niall", "niall");
    config.fail_from=(size_t) config.count+2;
    BOOST_CHECK_THROW(map.insert(v), std::bad_alloc);
    BOOST_CHECK(config.fail_from==config.count);
    BOOST_CHECK(v.first=="niall");
    BOOST_CHECK(v.second=="niall");
    config.fail_from=(size_t) config.count+2;
    BOOST_CHECK_THROW(map.insert(std::move(v)), std::bad_alloc);
    BOOST_CHECK(config.fail_from==config.count);
    BOOST_CHECK(v.first=="niall");
    BOOST_CHECK(v.second=="niall");
    config.fail_from=(size_t) config.count+2;
    BOOST_CHECK_NO_THROW(map.insert_noalloc(v));
    BOOST_CHECK(config.fail_from==config.count+1);
    BOOST_CHECK(v.first=="niall");
    BOOST_CHECK(v.second=="niall");
    config.fail_from=(size_t) config.count+2;
    BOOST_CHECK_NO_THROW(map.insert_noalloc(std::move(v)));
    BOOST_CHECK(config.fail_from==config.count+1);
    BOOST_CHECK(v.first=="niall");
    BOOST_CHECK(v.second=="niall");
  }

  // failed operator[] doesn't destroy value
  {
    map_type::value_type v=std::make_pair("niall", "niall");
    config.fail_from=(size_t) config.count+2;
    BOOST_CHECK_THROW(map[v.first], std::bad_alloc);
    BOOST_CHECK(config.fail_from==config.count);
    BOOST_CHECK(v.first=="niall");
    BOOST_CHECK(v.second=="niall");
    config.fail_from=(size_t) config.count+2;
    BOOST_CHECK_THROW(map[std::move(v.first)], std::bad_alloc);
    BOOST_CHECK(config.fail_from==config.count);
    BOOST_CHECK(v.first=="niall");
    BOOST_CHECK(v.second=="niall");
  }

  // failed emplace doesn't destroy value
  {
    map_type::value_type v=std::make_pair("niall", "niall");
    config.fail_from=(size_t) config.count+2;
    BOOST_CHECK_THROW(map.emplace(v), std::bad_alloc);
    BOOST_CHECK(config.fail_from==config.count);
    BOOST_CHECK(v.first=="niall");
    BOOST_CHECK(v.second=="niall");
    config.fail_from=(size_t) config.count+2;
    BOOST_CHECK_THROW(map.emplace(std::move(v)), std::bad_alloc);
    BOOST_CHECK(config.fail_from==config.count);
    BOOST_CHECK(v.first=="niall");
    //BOOST_CHECK(v.second=="niall"); // FIXME Known problem with implementation, awaiting fix.
  }

  // failed node ptr insert doesn't destroy value
  config.fail_from=(size_t) config.count+2;
  auto n=map.make_node_ptr("niall", "niall");
  BOOST_CHECK_THROW(map.insert(std::move(n)), std::bad_alloc);
  BOOST_CHECK(config.fail_from==config.count);
  BOOST_CHECK(n);
  BOOST_CHECK_NO_THROW(map.insert_noalloc(std::move(n)));
  BOOST_CHECK(config.fail_from==config.count);
  BOOST_CHECK(n);
}

BOOST_AUTO_TEST_CASE(works/concurrent_unordered_map/rehash/concurrent, "Tests that concurrent_unordered_map concurrent rehash works as expected")
{
  printf("\n=== concurrent_unordered_map concurrent rehash ===\n");
  //auto &config=boost::allocator_testing::get_config(true);
  //typedef boost::spinlock::concurrent_unordered_map<size_t, std::string, std::hash<size_t>, std::equal_to<size_t>, boost::allocator_testing::allocator<std::pair<const size_t, std::string>, std::allocator<std::pair<const size_t, std::string>>>> map_type;
  typedef boost::spinlock::concurrent_unordered_map<size_t, std::string> map_type;
  map_type map;
  boost::spinlock::atomic<size_t> gate(0);
  gate=boost::spinlock::thread::hardware_concurrency();
  if(gate<2) gate=2;
  size_t threads=gate, rehashes=0;
  BOOST_SPINLOCK_ANNOTATE_IGNORE_READS_BEGIN();
  BOOST_SPINLOCK_ANNOTATE_IGNORE_WRITES_BEGIN();
  std::vector<std::thread> _threads;
  for(size_t thread=0; thread<threads; thread++)
  {
    _threads.push_back(std::thread([&, thread]{
      bool amMaster=(thread==0);
      --gate;
      while(gate);
      if(amMaster)
      {
        for(size_t n=100; !gate; n++)
        {
          //printf("Rehashing to %u ...\n", (unsigned) n);
          map.rehash(n);
          boost::spinlock::this_thread::sleep_for(boost::spinlock::chrono::milliseconds(50));
          ++rehashes;
        }
      }
      else
      {
        std::string foo("n");
        size_t iters=BOOST_SPINLOCK_RUNNING_ON_VALGRIND ? 1000000 : 100000000;
        for(size_t n=0; n<iters; n++)
        {
          size_t v=n*10+thread;
          //printf("%u:%u, ", (unsigned) thread, (unsigned) n);
          if((n & 255)<128)
            map.insert(std::make_pair(v, foo));
          else
            map.erase(v-1280);
        }
        ++gate;
      }
    }));
  }
  for(auto &i : _threads)
    i.join();
  BOOST_SPINLOCK_ANNOTATE_IGNORE_READS_END();
  BOOST_SPINLOCK_ANNOTATE_IGNORE_WRITES_END();
  printf("Achieved %u rehashes\n", (unsigned) rehashes);
}






static double CalculateUnorderedMapPerformance(size_t reserve, bool use_transact, int type)
{
  boost::spinlock::spinlock<bool> lock;
  boost::spinlock::atomic<size_t> gate(0);
  std::unordered_map<int, int, boost::spinlock::fnv1a_hash<int>> map;
  usCount start, end;
  if(reserve)
  {
    map.reserve(reserve);
    for(int n=0; n<reserve/2; n++)
      map.insert(std::make_pair(-n, n));
  }
#pragma omp parallel
  {
    ++gate;
  }
  size_t threads=gate;
  //printf("There are %u threads in this CPU\n", (unsigned) threads);
  start=GetUsCount();
#pragma omp parallel for
  for(int thread=0; thread<threads; thread++)
  for(int n=0; n<10000000; n++)
  {
    if(2==type)
    {
      // One thread always writes with lock, remaining threads read with transact
      bool amMaster=(thread==0);
      if(amMaster)
      {
        bool doInsert=((n/threads) & 1)!=0;
        std::lock_guard<decltype(lock)> g(lock);
        if(doInsert)
          map.insert(std::make_pair(n, n));
        else if(!map.empty())
          map.erase(map.begin());
      }
      else
      {
        if(use_transact)
        {
          BOOST_BEGIN_TRANSACT_LOCK(lock)
          {
            map.find(n-1);
          }
          BOOST_END_TRANSACT_LOCK(lock)
        }
        else
        {
          std::lock_guard<decltype(lock)> g(lock);
          map.find(n-1);
        }
      }
    }
    else if(1==type)
    {
      if(use_transact)
      {
        int v=-(int)(n % (reserve/2));
        if(v)
        {
          BOOST_BEGIN_TRANSACT_LOCK(lock)
          auto it=map.find(v);
          //if(it==map.end()) std::cout << v;
          BOOST_END_TRANSACT_LOCK(lock)
        }
      }
      else
      {
        int v=-(int)(n % (reserve/2));
        if(v)
        {
          std::lock_guard<decltype(lock)> g(lock);
          auto it=map.find(v);
          if(it==map.end()) std::cout << v;
        }
      }
    }    
    else
    {
      if(use_transact)
      {
#if 0
        size_t v=n*10+thread;
        BOOST_BEGIN_TRANSACT_LOCK(lock)
        {
          if((n & 255)<128)
            map.insert(std::make_pair(v, n));
          else if(!map.empty())
            map.erase(map.find(v-128));
        }
        BOOST_END_TRANSACT_LOCK(lock)
#endif
      }
      else
      {
        size_t v=n*10+thread;
        std::lock_guard<decltype(lock)> g(lock);
        if((n & 255)<128)
          map.insert(std::make_pair(v, n));
        else if(!map.empty())
        {
          auto it=map.find(v-1280);
          if(it!=map.end())
            map.erase(it);
        }
      }
    }
//    if(!(n % 1000000))
//      std::cout << "Items now " << map.size() << std::endl;
  }
  end=GetUsCount();
  BOOST_REQUIRE(true);
//  printf("size=%u\n", (unsigned) map.size());
  return threads*10000000/((end-start)/1000000000000.0);
}

BOOST_AUTO_TEST_CASE(performance/unordered_map/small/write, "Tests the performance of multiple threads writing a small unordered_map")
{
  printf("\n=== Small unordered_map spinlock write performance ===\n");
  printf("1. Achieved %lf transactions per second\n", CalculateUnorderedMapPerformance(0, false, false));
  printf("2. Achieved %lf transactions per second\n", CalculateUnorderedMapPerformance(0, false, false));
  printf("3. Achieved %lf transactions per second\n", CalculateUnorderedMapPerformance(0, false, false));
}

BOOST_AUTO_TEST_CASE(performance/unordered_map/large/write, "Tests the performance of multiple threads writing a large unordered_map")
{
  printf("\n=== Large unordered_map spinlock write performance ===\n");
  printf("1. Achieved %lf transactions per second\n", CalculateUnorderedMapPerformance(10000, false, false));
  printf("2. Achieved %lf transactions per second\n", CalculateUnorderedMapPerformance(10000, false, false));
  printf("3. Achieved %lf transactions per second\n", CalculateUnorderedMapPerformance(10000, false, false));
}

BOOST_AUTO_TEST_CASE(performance/unordered_map/large/read, "Tests the performance of multiple threads reading a large unordered_map")
{
  printf("\n=== Large unordered_map spinlock read performance ===\n");
  printf("1. Achieved %lf transactions per second\n", CalculateUnorderedMapPerformance(10000, false, 1));
  printf("2. Achieved %lf transactions per second\n", CalculateUnorderedMapPerformance(10000, false, 1));
  printf("3. Achieved %lf transactions per second\n", CalculateUnorderedMapPerformance(10000, false, 1));
}

/*BOOST_AUTO_TEST_CASE(performance/unordered_map/transact/small, "Tests the transact performance of multiple threads using a small unordered_map")
{
  printf("\n=== Small unordered_map transact performance ===\n");
  printf("1. Achieved %lf transactions per second\n", CalculateUnorderedMapPerformance(0, true, false));
#ifndef BOOST_HAVE_TRANSACTIONAL_MEMORY_COMPILER
  printf("2. Achieved %lf transactions per second\n", CalculateUnorderedMapPerformance(0, true, false));
  printf("3. Achieved %lf transactions per second\n", CalculateUnorderedMapPerformance(0, true, false));
#endif
}

BOOST_AUTO_TEST_CASE(performance/unordered_map/transact/large, "Tests the transact performance of multiple threads using a large unordered_map")
{
  printf("\n=== Large unordered_map transact performance ===\n");
  printf("1. Achieved %lf transactions per second\n", CalculateUnorderedMapPerformance(10000, true, false));
#ifndef BOOST_HAVE_TRANSACTIONAL_MEMORY_COMPILER
  printf("2. Achieved %lf transactions per second\n", CalculateUnorderedMapPerformance(10000, true, false));
  printf("3. Achieved %lf transactions per second\n", CalculateUnorderedMapPerformance(10000, true, false));
#endif
}*/

static double CalculateConcurrentUnorderedMapPerformance(size_t reserve, int type)
{
  boost::spinlock::atomic<size_t> gate(0);
  gate.store(0);
#ifdef BOOST_HAVE_SYSTEM_CONCURRENT_UNORDERED_MAP
  concurrency::concurrent_unordered_map<int, int, boost::spinlock::fnv1a_hash<int>> map;
#else
  boost::spinlock::concurrent_unordered_map<int, int, boost::spinlock::fnv1a_hash<int>> map;
#endif
  usCount start, end;
  if(reserve)
  {
#ifndef BOOST_HAVE_SYSTEM_CONCURRENT_UNORDERED_MAP
    map.min_bucket_capacity(1);
    map.reserve(reserve);
#endif
    for(int n=0; n<reserve/2; n++)
      map.insert(std::make_pair(-n, n));
  }
#pragma omp parallel
  {
    ++gate;
  }
  //gate=4;
  size_t threads=gate;
  printf("There are %u threads in this CPU\n", (unsigned) threads);
  size_t iters=BOOST_SPINLOCK_RUNNING_ON_VALGRIND ? 100000 : 10000000;
  start=GetUsCount();
#pragma omp parallel for
  for(int thread=0; thread<threads; thread++)
  for(int n=0; n<iters; n++)
  {
#if 0
    if(readwrites)
    {
      // One thread always writes with lock, remaining threads read with transact
      bool amMaster=(thread==0);
      if(amMaster)
      {
        bool doInsert=((n/threads) & 1)!=0;
        if(doInsert)
          map.insert(std::make_pair(n, n));
        else if(!map.empty())
          map.erase(map.begin());
      }
      else
      {
        map.find(n-1);
      }
    }
    else
#endif
    if(0==type)
    {
      size_t v=n*10+thread;
      if((n & 255)<128)
        map.insert(std::make_pair(v, n));
      else
      {
#ifdef BOOST_HAVE_SYSTEM_CONCURRENT_UNORDERED_MAP
        map.unsafe_erase(v-1280);
#else
        map.erase(v-1280);
#endif
      }
    }
    else if(1==type)
    {
      int v=-(int)(n % (reserve/2));
      if(v)
      {
        auto it=map.find(v);
        if(it==map.end()) std::cout << v;
      }
    }
//    if(!(n % 1000000))
//      std::cout << "Items now " << map.size() << std::endl;
  }
  end=GetUsCount();
  //map.dump_buckets(std::cout);
  BOOST_REQUIRE(true);
//  printf("size=%u\n", (unsigned) map.size());
  return threads*10000000/((end-start)/1000000000000.0);
}

BOOST_AUTO_TEST_CASE(performance/concurrent_unordered_map/small, "Tests the performance of multiple threads writing a small concurrent_unordered_map")
{
  printf("\n=== Small concurrent_unordered_map write performance ===\n");
  printf("1. Achieved %lf transactions per second\n", CalculateConcurrentUnorderedMapPerformance(0, false));
  printf("2. Achieved %lf transactions per second\n", CalculateConcurrentUnorderedMapPerformance(0, false));
  printf("3. Achieved %lf transactions per second\n", CalculateConcurrentUnorderedMapPerformance(0, false));
#ifdef BOOST_USING_INTEL_TSX
  if(boost::spinlock::intel_stuff::have_intel_tsx_support())
  {
    printf("\nForcing Intel TSX support off ...\n");
    boost::spinlock::intel_stuff::have_intel_tsx_support_result=1;
    printf("1. Achieved %lf transactions per second\n", CalculateConcurrentUnorderedMapPerformance(0, false));
    printf("2. Achieved %lf transactions per second\n", CalculateConcurrentUnorderedMapPerformance(0, false));
    printf("3. Achieved %lf transactions per second\n", CalculateConcurrentUnorderedMapPerformance(0, false));
    boost::spinlock::intel_stuff::have_intel_tsx_support_result=0;
  }
#endif
}

BOOST_AUTO_TEST_CASE(performance/concurrent_unordered_map/large/write, "Tests the performance of multiple threads writing a large concurrent_unordered_map")
{
  printf("\n=== Large concurrent_unordered_map write performance ===\n");
  printf("1. Achieved %lf transactions per second\n", CalculateConcurrentUnorderedMapPerformance(10000, false));
  printf("2. Achieved %lf transactions per second\n", CalculateConcurrentUnorderedMapPerformance(10000, false));
  printf("3. Achieved %lf transactions per second\n", CalculateConcurrentUnorderedMapPerformance(10000, false));
#ifdef BOOST_USING_INTEL_TSX
  if(boost::spinlock::intel_stuff::have_intel_tsx_support())
  { 
    printf("\nForcing Intel TSX support off ...\n");
    boost::spinlock::intel_stuff::have_intel_tsx_support_result=1;
    printf("1. Achieved %lf transactions per second\n", CalculateConcurrentUnorderedMapPerformance(10000, false));
    printf("2. Achieved %lf transactions per second\n", CalculateConcurrentUnorderedMapPerformance(10000, false));
    printf("3. Achieved %lf transactions per second\n", CalculateConcurrentUnorderedMapPerformance(10000, false));
    boost::spinlock::intel_stuff::have_intel_tsx_support_result=0;
  } 
#endif
}

BOOST_AUTO_TEST_CASE(performance/concurrent_unordered_map/large/read, "Tests the performance of multiple threads reading a large concurrent_unordered_map")
{
  printf("\n=== Large concurrent_unordered_map read performance ===\n");
  printf("1. Achieved %lf transactions per second\n", CalculateConcurrentUnorderedMapPerformance(10000, 1));
  printf("2. Achieved %lf transactions per second\n", CalculateConcurrentUnorderedMapPerformance(10000, 1));
  printf("3. Achieved %lf transactions per second\n", CalculateConcurrentUnorderedMapPerformance(10000, 1));
#ifdef BOOST_USING_INTEL_TSX
  if(boost::spinlock::intel_stuff::have_intel_tsx_support())
  { 
    printf("\nForcing Intel TSX support off ...\n");
    boost::spinlock::intel_stuff::have_intel_tsx_support_result=1;
    printf("1. Achieved %lf transactions per second\n", CalculateConcurrentUnorderedMapPerformance(10000, 1));
    printf("2. Achieved %lf transactions per second\n", CalculateConcurrentUnorderedMapPerformance(10000, 1));
    printf("3. Achieved %lf transactions per second\n", CalculateConcurrentUnorderedMapPerformance(10000, 1));
    boost::spinlock::intel_stuff::have_intel_tsx_support_result=0;
  } 
#endif
}
#endif

BOOST_AUTO_TEST_CASE(works/traits, "Tests that the traits work as intended")
{
  using namespace boost::spinlock::traits;
  {
    int foo=1;
    // Capturing lambdas
    auto a = [foo](int) { (void) foo; };
    auto b = [foo](int&&) { (void) foo; };
    auto c = [foo](const int&) { (void) foo; };
    auto d = [foo](int&) { (void) foo; };
    // std function (class with call operator)
    auto e = std::function<void(int)>();
    auto f = std::function<void(int&&)>();
    // plain old functions
    void(*g)(int) = [](int) {};
    void(*h)(int&&) = [](int&&) {};
    void(*i)(const int&) = [](const int&) {};
    void(*j)(int&) = [](int&) {};

    static_assert(!argument_is_rvalue<decltype(a), int&&>::value, "non-rvalue not recognised");
    static_assert( argument_is_rvalue<decltype(b), int&&>::value, "rvalue not recognised");
    static_assert(!argument_is_rvalue<decltype(c), int&&>::value, "non-rvalue not recognised");
    static_assert(!argument_is_rvalue<decltype(d), int& >::value, "non-rvalue not recognised");
    static_assert(!argument_is_rvalue<decltype(e), int&&>::value, "non-rvalue not recognised");
    static_assert( argument_is_rvalue<decltype(f), int&&>::value, "rvalue not recognised");
    static_assert(!argument_is_rvalue<decltype(g), int&&>::value, "non-rvalue not recognised");
    static_assert( argument_is_rvalue<decltype(h), int&&>::value, "rvalue not recognised");
    static_assert(!argument_is_rvalue<decltype(i), int&&>::value, "non-rvalue not recognised");
    static_assert(!argument_is_rvalue<decltype(j), int& >::value, "non-rvalue not recognised");
  }
#ifdef __cpp_generic_lambdas
  {
    int foo=1;
    // Capturing lambdas with templated call functions
    auto a = [foo](auto) { (void) foo; };
    auto b = [foo](auto&&) { (void) foo; };
    auto c = [foo](const auto&) { (void) foo; };
    auto d = [foo](auto&) { (void) foo; };
    static_assert(!argument_is_rvalue<decltype(a), int&&>::value, "non-rvalue not recognised");
    static_assert( argument_is_rvalue<decltype(b), int&&>::value, "rvalue not recognised");
    static_assert(!argument_is_rvalue<decltype(c), int&&>::value, "non-rvalue not recognised");
    static_assert(!argument_is_rvalue<decltype(d), int& >::value, "non-rvalue not recognised");
  }
#endif
}

BOOST_AUTO_TEST_CASE(works/monad, "Tests that the monad works as intended")
{
  using namespace boost::spinlock::lightweight_futures;
  {
    monad<int> m;
    BOOST_CHECK(!m);
    BOOST_CHECK(!m.is_ready());
    BOOST_CHECK(!m.has_value());
    BOOST_CHECK(!m.has_error());
    BOOST_CHECK(!m.has_exception());
    BOOST_CHECK_THROW(m.get(), monad_error);
    BOOST_CHECK_THROW(m.get_error(), monad_error);
    BOOST_CHECK_THROW(m.get_exception(), monad_error);
  }
  {
    monad<int> m(5);
    BOOST_CHECK(m);
    BOOST_CHECK(m.is_ready());
    BOOST_CHECK(m.has_value());
    BOOST_CHECK(!m.has_error());
    BOOST_CHECK(!m.has_exception());
    BOOST_CHECK(m.get()==5);
    m.get()=6;
    BOOST_CHECK(m.get()==6);
    BOOST_CHECK(!m.get_error());
    BOOST_CHECK(!m.get_exception());
    m.clear();
    BOOST_CHECK(!m);
    BOOST_CHECK(!m.is_ready());
    BOOST_CHECK(!m.has_value());
    BOOST_CHECK(!m.has_error());
    BOOST_CHECK(!m.has_exception());
    BOOST_CHECK_THROW(m.get(), monad_error);
    BOOST_CHECK_THROW(m.get_error(), monad_error);
    BOOST_CHECK_THROW(m.get_exception(), monad_error);
  }
  {
    monad<std::string> m("niall");
    BOOST_CHECK(m);
    BOOST_CHECK(m.is_ready());
    BOOST_CHECK(m.has_value());
    BOOST_CHECK(!m.has_error());
    BOOST_CHECK(!m.has_exception());
    BOOST_CHECK(m.get()=="niall");
    m.get()="NIALL";
    BOOST_CHECK(m.get()=="NIALL");
    auto temp(std::move(m).get());
    BOOST_CHECK(temp=="NIALL");
    BOOST_CHECK(m.get().empty());
    BOOST_CHECK(!m.get_error());
    BOOST_CHECK(!m.get_exception());
    m.clear();
    BOOST_CHECK(!m);
  }
  {
    std::error_code ec(5, std::system_category());
    auto e=std::make_exception_ptr(std::system_error(ec));
    monad<int> m(ec);
    BOOST_CHECK(!m);
    BOOST_CHECK(m.is_ready());
    BOOST_CHECK(!m.has_value());
    BOOST_CHECK(m.has_error());
    BOOST_CHECK(m.has_exception());
    BOOST_CHECK_THROW(m.get(), std::system_error);
    BOOST_CHECK(m.get_error()==ec);
    BOOST_CHECK(m.get_exception());
    try
    {
      std::rethrow_exception(m.get_exception());
    }
    catch(const std::system_error &ex)
    {
      BOOST_CHECK(ex.code()==ec);
      BOOST_CHECK(ex.code().value()==5);
    }
  }
  {
    auto e=std::make_exception_ptr(5);
    monad<int> m(e);
    BOOST_CHECK(!m);
    BOOST_CHECK(m.is_ready());
    BOOST_CHECK(!m.has_value());
    BOOST_CHECK(!m.has_error());
    BOOST_CHECK(m.has_exception());
    BOOST_CHECK_THROW(m.get(), int);
    BOOST_CHECK(!m.get_error());
    BOOST_CHECK(m.get_exception()==e);
  }
}

BOOST_AUTO_TEST_CASE(works/monad/optional, "Tests that the monad acts as an optional R")
{
  using namespace boost::spinlock::lightweight_futures;

  //! [optional_example]
  auto maybe_getenv=[](const char* n) -> monad<const char *>
  {
      if(const char* x = std::getenv(n))
         return x;
      else
         return {};
  };
  auto a=maybe_getenv("SHOULDNEVEREXIST");
  BOOST_CHECK(!a);
  BOOST_CHECK_THROW(a.value(), monad_error);
  BOOST_CHECK(a.value_or(nullptr)==nullptr);
  auto b=maybe_getenv("HOME");
  BOOST_CHECK(b);
  std::cout << "$HOME=" << b.value() << std::endl;
  //! [optional_example]
}

BOOST_AUTO_TEST_CASE(works/monad/fileopen, "Tests that the monad semantically represents opening a file")
{
  using namespace boost::spinlock::lightweight_futures;

  //! [monad_example]
  auto openfile=[](std::string path) noexcept -> monad<int>
  {
    int fd;
    while(-1==(fd=BOOST_SPINLOCK_POSIX_OPEN(path.c_str(), 0)) && EINTR==errno);
    try
    {
      if(-1==fd)
      {
        int code=errno;
        // If a temporary failure, this is an expected unexpected outcome
        if(EBUSY==code || EISDIR==code || ELOOP==code || ENOENT==code || ENOTDIR==code || EPERM==code || EACCES==code)
          return std::error_code(code, std::generic_category());

        // If a non-temporary failure, this is an unexpected outcome
        return std::make_exception_ptr(std::system_error(code, std::generic_category(), strerror(code)));
      }
      return fd;
    }
    catch(...)
    {
      // Any exception thrown is truly unexpected
      return std::current_exception();
    }
  };
  auto a=openfile("shouldneverexistnotever");
  BOOST_CHECK(!a);
  BOOST_CHECK(!a.empty());
  BOOST_CHECK(!a.has_value());
  BOOST_CHECK(a.has_exception());
  BOOST_CHECK(a.has_error());
  BOOST_CHECK(a.get_error()==std::error_code(ENOENT, std::generic_category()));
  //! [monad_example]
}

BOOST_AUTO_TEST_CASE(works/monad/noexcept, "Tests that the monad correctly inherits noexcept from its type R")
{
  using namespace boost::spinlock::lightweight_futures;
  {
    typedef monad<int> type;
    std::cout << "monad<int> is_nothrow_copy_constructible=" << type::is_nothrow_copy_constructible << std::endl;
    std::cout << "monad<int> is_nothrow_move_constructible=" << type::is_nothrow_move_constructible << std::endl;
    std::cout << "monad<int> is_nothrow_copy_assignable="    << type::is_nothrow_copy_assignable << std::endl;
    std::cout << "monad<int> is_nothrow_move_assignable="    << type::is_nothrow_move_assignable << std::endl;
    std::cout << "monad<int> is_nothrow_destructible="       << type::is_nothrow_destructible << std::endl;
    BOOST_CHECK(type::is_nothrow_copy_constructible == std::is_nothrow_copy_constructible<type>::value);
    BOOST_CHECK(type::is_nothrow_move_constructible == std::is_nothrow_move_constructible<type>::value);
    BOOST_CHECK(type::is_nothrow_copy_assignable    == std::is_nothrow_copy_assignable<type>::value);
    BOOST_CHECK(type::is_nothrow_move_assignable    == std::is_nothrow_move_assignable<type>::value);
    BOOST_CHECK(type::is_nothrow_destructible       == std::is_nothrow_destructible<type>::value);
    BOOST_CHECK(true  == std::is_nothrow_copy_constructible<type>::value);
    BOOST_CHECK(true  == std::is_nothrow_move_constructible<type>::value);
    BOOST_CHECK(true  == std::is_nothrow_copy_assignable<type>::value);
    BOOST_CHECK(true  == std::is_nothrow_move_assignable<type>::value);
    BOOST_CHECK(true  == std::is_nothrow_destructible<type>::value);
  }
  {
    typedef monad<std::string> type;
    std::cout << "monad<string> is_nothrow_copy_constructible=" << type::is_nothrow_copy_constructible << std::endl;
    std::cout << "monad<string> is_nothrow_move_constructible=" << type::is_nothrow_move_constructible << std::endl;
    std::cout << "monad<string> is_nothrow_copy_assignable="    << type::is_nothrow_copy_assignable << std::endl;
    std::cout << "monad<string> is_nothrow_move_assignable="    << type::is_nothrow_move_assignable << std::endl;
    std::cout << "monad<string> is_nothrow_destructible="       << type::is_nothrow_destructible << std::endl;
    BOOST_CHECK(type::is_nothrow_copy_constructible == std::is_nothrow_copy_constructible<type>::value);
    BOOST_CHECK(type::is_nothrow_move_constructible == std::is_nothrow_move_constructible<type>::value);
    BOOST_CHECK(type::is_nothrow_copy_assignable    == std::is_nothrow_copy_assignable<type>::value);
    BOOST_CHECK(type::is_nothrow_move_assignable    == std::is_nothrow_move_assignable<type>::value);
    BOOST_CHECK(type::is_nothrow_destructible       == std::is_nothrow_destructible<type>::value);
    BOOST_CHECK(false == std::is_nothrow_copy_constructible<type>::value);
    BOOST_CHECK(true  == std::is_nothrow_move_constructible<type>::value);
    BOOST_CHECK(false == std::is_nothrow_copy_assignable<type>::value);
    BOOST_CHECK(true  == std::is_nothrow_move_assignable<type>::value);
    BOOST_CHECK(true  == std::is_nothrow_destructible<type>::value);
  }
  {
    struct Except {
      int n;
      Except() = delete;
      Except(const Except &) noexcept(false) {}
      Except(Except &&) noexcept(false) {}
      ~Except() noexcept(false) { }
    };
    typedef monad<Except> type;
    std::cout << "monad<Except> is_nothrow_copy_constructible=" << type::is_nothrow_copy_constructible << std::endl;
    std::cout << "monad<Except> is_nothrow_move_constructible=" << type::is_nothrow_move_constructible << std::endl;
    std::cout << "monad<Except> is_nothrow_copy_assignable="    << type::is_nothrow_copy_assignable << std::endl;
    std::cout << "monad<Except> is_nothrow_move_assignable="    << type::is_nothrow_move_assignable << std::endl;
    std::cout << "monad<Except> is_nothrow_destructible="       << type::is_nothrow_destructible << std::endl;
    BOOST_CHECK(type::is_nothrow_copy_constructible == std::is_nothrow_copy_constructible<type>::value);
    BOOST_CHECK(type::is_nothrow_move_constructible == std::is_nothrow_move_constructible<type>::value);
    BOOST_CHECK(type::is_nothrow_copy_assignable    == std::is_nothrow_copy_assignable<type>::value);
    BOOST_CHECK(type::is_nothrow_move_assignable    == std::is_nothrow_move_assignable<type>::value);
    BOOST_CHECK(type::is_nothrow_destructible       == std::is_nothrow_destructible<type>::value);
    BOOST_CHECK(false == std::is_nothrow_copy_constructible<type>::value);
    BOOST_CHECK(false == std::is_nothrow_move_constructible<type>::value);
    BOOST_CHECK(false == std::is_nothrow_copy_assignable<type>::value);
    BOOST_CHECK(false == std::is_nothrow_move_assignable<type>::value);
    BOOST_CHECK(false == std::is_nothrow_destructible<type>::value);
  }
}

BOOST_AUTO_TEST_CASE(works/monad/udts, "Tests that the monad works as intended with user-defined types")
{
  using namespace boost::spinlock::lightweight_futures;
  // No default constructor, no copy/move, no assignment
  {
    struct udt
    {
      int a;
      udt(int _a) : a(_a) { }
      udt() = delete;
      udt(const udt &) = delete;
      udt(udt &&) = delete;
      udt &operator=(const udt &) = delete;
      udt &operator=(udt &&) = delete;
    };
    monad<udt> foo(5);
    BOOST_CHECK(5==foo.get().a);
  }
  // Emplace construct, throws during move and copy
  {
    struct udt
    {
      std::string a;
      udt(std::string _a) : a(_a) { }
      udt() = delete;
      udt(const udt &) { throw std::logic_error("copy"); }
      udt(udt &&) { throw std::logic_error("move"); }
      udt &operator=(const udt &) { throw std::logic_error("copy"); }
      udt &operator=(udt &&) { throw std::logic_error("move"); }
    };
    // Emplace constructs
    monad<udt> foo("douglas");
    BOOST_CHECK("douglas"==foo.get().a);
    foo.emplace("niall");
    BOOST_CHECK("niall"==foo.get().a);
    try
    {
      auto foo2(foo);
      BOOST_CHECK(false);
    }
    catch(const std::logic_error &e)
    {
      BOOST_CHECK(!strcmp(e.what(), "copy"));
    }
    catch(...)
    {
      BOOST_CHECK(false);
    }
    BOOST_CHECK("niall"==foo.get().a);
    try
    {
      auto foo2(std::move(foo));
      BOOST_CHECK(false);
    }
    catch(const std::logic_error &e)
    {
      BOOST_CHECK(!strcmp(e.what(), "move"));
    }
    catch(...)
    {
      BOOST_CHECK(false);
    }
    BOOST_CHECK("niall"==foo.get().a);
    // Does throwing during copy assignment work?
    {
      monad<udt> foo2("douglas");
      try
      {
        foo2=foo;
        BOOST_CHECK(false);
      }
      catch(const std::logic_error &e)
      {
        BOOST_CHECK(!strcmp(e.what(), "copy"));
        BOOST_CHECK(foo2.empty());
      }
      catch(...)
      {
        BOOST_CHECK(false);
      }
      BOOST_CHECK("niall"==foo.get().a);
    }
    // Does throwing during move assignment work?
    {
      monad<udt> foo2("douglas");
      try
      {
        foo2=std::move(foo);
        BOOST_CHECK(false);
      }
      catch(const std::logic_error &e)
      {
        BOOST_CHECK(!strcmp(e.what(), "move"));
        BOOST_CHECK(foo2.empty());
      }
      catch(...)
      {
        BOOST_CHECK(false);
      }
      BOOST_CHECK("niall"==foo.get().a);
    }
  }
}

BOOST_AUTO_TEST_CASE(works/monad/containers, "Tests that the monad works as intended inside containers")
{
  using namespace boost::spinlock::lightweight_futures;
  std::vector<monad<std::vector<int>>> vect;
  vect.push_back({5, 6, 7, 8});
  vect.push_back({1, 2, 3, 4});
  BOOST_REQUIRE(vect.size()==2);
  BOOST_CHECK(vect[0].get().size()==4);
  BOOST_CHECK(vect[1].get().size()==4);
  BOOST_CHECK(vect[0].get().front()==5);
  BOOST_CHECK(vect[0].get().back()==8);
  BOOST_CHECK(vect[1].get().front()==1);
  BOOST_CHECK(vect[1].get().back()==4);
}

BOOST_AUTO_TEST_CASE(works/monad/swap, "Tests that the monad swaps as intended")
{
  using namespace boost::spinlock::lightweight_futures;
  monad<std::string> a("niall"), b("douglas");
  BOOST_CHECK(a.get()=="niall");
  BOOST_CHECK(b.get()=="douglas");
  std::swap(a, b);
  BOOST_CHECK(a.get()=="douglas");
  BOOST_CHECK(b.get()=="niall");
  a.set_error(std::error_code());
  std::swap(a, b);
  BOOST_CHECK(a.get()=="niall");
  BOOST_CHECK(b.get_error()==std::error_code());
}

BOOST_AUTO_TEST_CASE(works/monad/unwrap, "Tests that the monad unwraps as intended")
{
  using namespace boost::spinlock::lightweight_futures;
  std::error_code ec;
  monad<std::string> a("niall"), b(ec);
  monad<monad<std::string>> c(std::move(a)), d(std::move(b));
  monad<monad<monad<std::string>>> e(std::move(c)), f(std::move(d));
  monad<monad<monad<monad<std::string>>>> g(std::move(e)), h(std::move(f));
  auto i(g.unwrap()), j(h.unwrap());
  BOOST_CHECK((std::is_same<decltype(a), decltype(i)>::value));
  BOOST_CHECK((std::is_same<decltype(b), decltype(j)>::value));
  BOOST_CHECK(i.get()=="niall");
  BOOST_CHECK(j.get_error()==ec);
  BOOST_CHECK(g.get().get().get().get()=="niall");
  BOOST_CHECK(h.get().get().get().get_error()==ec);
  auto k(std::move(g).unwrap()), l(std::move(h).unwrap());
  BOOST_CHECK((std::is_same<decltype(a), decltype(k)>::value));
  BOOST_CHECK((std::is_same<decltype(b), decltype(l)>::value));
  BOOST_CHECK(k.get()=="niall");
  BOOST_CHECK(l.get_error()==ec);
  BOOST_CHECK(g.get().get().get().get().empty());
}

BOOST_AUTO_TEST_CASE(works/monad/then, "Tests that the monad continues with then() as intended")
{
  using namespace boost::spinlock::lightweight_futures;
  std::error_code ec;
  monad<std::string> a("niall"), b(ec);
  // Does auto unwrapping work?
  auto c(a.then([](monad<std::string> v){return v;}));
  BOOST_CHECK(c.get()=="niall");
  BOOST_CHECK(a.get()=="niall");
  // Does auto wrapping work?
  auto d(a.then([](monad<std::string> &&){return 5;}));
  BOOST_CHECK(d.get()==5);
  BOOST_CHECK(a.get()=="niall");
#ifdef __cpp_generic_lambdas
  // Do auto lambdas work?
  auto e(a.then([](auto v){return v;}));
  BOOST_CHECK(e.get()=="niall");
  BOOST_CHECK(a.get()=="niall");
#endif

  // Does automatic move semantics work?
  auto j(a.then([](monad<std::string> &&v){return std::move(v);}));
  BOOST_CHECK(j.get()=="niall");
  BOOST_CHECK(a.get().empty());
#ifdef __cpp_generic_lambdas
  // Does automatic move semantics with auto lambdas work?
  a.emplace("niall");
  auto k(a.then([](auto &&v){return std::move(v);}));
  BOOST_CHECK(k.get()=="niall");
  BOOST_CHECK(a.get().empty());
#endif
}

BOOST_AUTO_TEST_CASE(works/monad/bind, "Tests that the monad continues with bind() as intended")
{
  using namespace boost::spinlock::lightweight_futures;
  std::error_code ec;
  {
    monad<std::string> a("niall"), b(ec);
    // Does bind work?
    auto c(a.bind([](std::string &&) -> monad<int> {return 5;}));
    BOOST_CHECK(c.get()==5);
    BOOST_CHECK(a.get() == "niall");
    auto d(b.bind([](std::string &&) -> monad<int> {return 5;}));
    BOOST_CHECK(d.has_error());
#ifdef __cpp_generic_lambdas
    auto e(a.bind([](auto) -> monad<int> {return 5;}));
    BOOST_CHECK(e.get()==5);
    BOOST_CHECK(a.get() == "niall");
    auto f(b.bind([](auto) -> monad<int> {return 5;}));
    BOOST_CHECK(f.has_error());
#endif
    auto g(a.bind([](std::string &&v) {return v;}));
    BOOST_CHECK(g.get()=="niall");
    BOOST_CHECK(a.get().empty());
    auto h(b.bind([](std::string &&v) {return v;}));
    BOOST_CHECK(h.has_error());
    a.emplace("niall");
#ifdef __cpp_generic_lambdas
    auto i(a.bind([](auto &&v) {return v;}));
    BOOST_CHECK(i.get()=="niall");
    BOOST_CHECK(a.get().empty());
    auto j(b.bind([](auto &&v) {return v;}));
    BOOST_CHECK(j.has_error());
    a.emplace("niall");
#endif

    // Does bind work with chains of value, error, exception and empty?
    auto x(
      a.bind([ec](std::string){return ec;})
       .bind([](std::error_code){return std::make_exception_ptr(5);})
       .bind([](std::exception_ptr){return;})
       .bind([]{return std::string("douglas");})
    );
    BOOST_CHECK(x.get()=="douglas");
    auto y(
      a.bind([ec](std::string) -> monad<int> {return ec;})
       .bind([](std::error_code){return std::make_exception_ptr(5);})
       .bind([](std::exception_ptr){return;})
       .bind([]{return 5;})
    );
    BOOST_CHECK(y.get()==5);
    auto z(
      a.bind([](std::string &&v){ return v;})
       .bind([](std::string &&v){ return v;})
       .bind([](std::string &&v){ return v;})
       .bind([](std::string &&v){ return v;})
    );
    BOOST_CHECK(z.get()=="niall");
    BOOST_CHECK(a.get().empty());
  }

BOOST_AUTO_TEST_CASE(works/monad/map, "Tests that the monad continues with map() as intended")
{
  using namespace boost::spinlock::lightweight_futures;
  std::error_code ec;
  {
    monad<std::string> a("niall"), b(ec);
    // Does map work?
    auto c(a.map([](std::string v) -> monad<std::string> {return v;}));
    BOOST_CHECK(c.get().get()=="niall");
    BOOST_CHECK(a.get() == "niall");
    auto d(b.map([](std::string v) -> monad<std::string> {return v;}));
    BOOST_CHECK(d.has_error());
  }
}

BOOST_AUTO_TEST_CASE(works/future, "Tests that the future-promise works as intended")
{
  using namespace boost::spinlock::lightweight_futures;
  {
    {
      future<int> f;
      BOOST_CHECK(!f.valid());
      BOOST_CHECK(!f.is_ready());
      BOOST_CHECK(!f.has_exception());
      BOOST_CHECK(!f.has_value());
      BOOST_CHECK_THROW(f.get(), std::future_error);
    }
    promise<int> p;
    future<int> f(p.get_future());
//    BOOST_CHECK_THROW(p.get_future(), future_error);
    BOOST_CHECK(f.valid());
    BOOST_CHECK(!f.is_ready());
    BOOST_CHECK(!f.has_exception());
    BOOST_CHECK(!f.has_value());
    p.set_value(5);
//    BOOST_CHECK_THROW(p.set_value(6), future_error);
    BOOST_CHECK(f.valid());
    BOOST_CHECK(f.is_ready());
    BOOST_CHECK(!f.has_exception());
    BOOST_CHECK(f.has_value());
    BOOST_CHECK(f.get()==5);  // destroys shared state, resetting to default constructed
    BOOST_CHECK(!f.valid());
    BOOST_CHECK(!f.is_ready());
    BOOST_CHECK(!f.has_exception());
    BOOST_CHECK(!f.has_value());
    BOOST_CHECK_THROW(f.get(), std::future_error);
  }
  {
    promise<int> p;
    p.set_value(5);  // before future construction, should induce constexpr
    future<int> f(p.get_future());
//    BOOST_CHECK_THROW(p.set_value(6), future_error);
    BOOST_CHECK(f.valid());
    BOOST_CHECK(f.is_ready());
    BOOST_CHECK(!f.has_exception());
    BOOST_CHECK(f.has_value());
    BOOST_CHECK(f.get()==5);  // destroys shared state, resetting to default constructed
    BOOST_CHECK(!f.valid());
    BOOST_CHECK(!f.is_ready());
    BOOST_CHECK(!f.has_exception());
    BOOST_CHECK(!f.has_value());
    BOOST_CHECK_THROW(f.get(), std::future_error);
  }
  {
    future<int> f;
    {
      promise<int> p;
      f=p.get_future();
    }
    BOOST_CHECK(!f.valid());
    BOOST_CHECK(f.is_ready());
    BOOST_CHECK(f.has_exception());
    BOOST_CHECK(!f.has_value());
    BOOST_CHECK_THROW(f.get(), std::future_error);
  }
}


BOOST_AUTO_TEST_SUITE_END()

#ifndef BOOST_MEMORY_TRANSACTIONS_DISABLE_CATCH
int main(int argc, char *argv[])
{
#ifdef _OPENMP
  printf("These unit tests have been compiled with parallel support. I will use as many threads as CPU cores.\n");
#else
  printf("These unit tests have not been compiled with parallel support and will execute only those which are sequential.\n");
#endif
#ifdef BOOST_HAVE_TRANSACTIONAL_MEMORY_COMPILER
  printf("These unit tests have been compiled using a transactional compiler. I will use __transaction_relaxed.\n");
#else
  printf("These unit tests have not been compiled using a transactional compiler.\n");
#endif
#if 0
  printf("Please attach debugger now ...\n");
  getchar();
#endif
#if 0
  cpu_set_t *cpuset=CPU_ALLOC(2);
  CPU_ZERO_S(CPU_ALLOC_SIZE(2), cpuset);
  CPU_SET_S(0, 2, cpuset);
  CPU_SET_S(1, 2, cpuset);
  pthread_setaffinity_np(pthread_self(), CPU_ALLOC_SIZE(2), cpuset);
#endif
  int result=Catch::Session().run(argc, argv);
  return result;
}
#endif
