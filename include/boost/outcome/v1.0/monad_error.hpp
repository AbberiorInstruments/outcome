/* monad_error.hpp
Provides a custom monad_error error code
(C) 2015-2017 Niall Douglas http://www.nedprod.com/
File Created: Jan 2017


Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

#include "config.hpp"

#ifndef BOOST_OUTCOME_MONAD_ERROR_H
#define BOOST_OUTCOME_MONAD_ERROR_H

BOOST_OUTCOME_V1_NAMESPACE_EXPORT_BEGIN

//! \brief Enumeration of the ways in which a monad operation may fail \ingroup monad
enum class monad_errc
{
  //already_set = 1,        //!< Attempt to store a value into the monad twice
  no_state = 2,           //!< Attempt to use without a state
  exception_present = 3,  //!< Attempt to fetch an error state when the monad is in an exceptioned state
};

namespace _detail
{
  class monad_category : public stl11::error_category
  {
  public:
    virtual const char *name() const noexcept { return "basic_monad"; }
    virtual std::string message(int c) const
    {
      switch (c)
      {
      case 1:
        return "already set";
      case 2:
        return "no state";
      case 3:
        return "exception present";
      default:
        return "unknown";
      }
    }
  };
}

/*! \brief Returns a reference to a monad error category. Note the address
of one of these may not be constant throughout the process as per the ISO spec.
\ingroup monad
*/
inline const _detail::monad_category &monad_category()
{
  static _detail::monad_category c;
  return c;
}

//! \brief A monad exception object \ingroup monad
class BOOSTLITE_SYMBOL_VISIBLE monad_error : public stl11::system_error
{
public:
  monad_error(stl11::error_code ec)
    : std::system_error(ec)
  {
  }
};

//! \brief ADL looked up by the STL to convert a monad_errc into an error_code. \ingroup monad
inline stl11::error_code make_error_code(monad_errc e)
{
  return stl11::error_code(static_cast<int>(e), monad_category());
}

//! \brief ADL looked up by the STL to convert a monad_errc into an error_condition. \ingroup monad
inline stl11::error_condition make_error_condition(monad_errc e)
{
  return stl11::error_condition(static_cast<int>(e), monad_category());
}

BOOST_OUTCOME_V1_NAMESPACE_END

#if BOOST_OUTCOME_USE_BOOST_ERROR_CODE
namespace boost
{
  namespace system
  {
    //! \brief Tells the STL this is an error code enum \ingroup monad
    template <> struct is_error_code_enum<BOOST_OUTCOME_V1_NAMESPACE::monad_errc> : std::true_type
    {
    };
    //! \brief Tells the STL this is an error condition enum \ingroup monad
    template <> struct is_error_condition_enum<BOOST_OUTCOME_V1_NAMESPACE::monad_errc> : std::true_type
    {
    };
  }
}
#else
namespace std
{
  //! \brief Tells the STL this is an error code enum \ingroup monad
  template <> struct is_error_code_enum<BOOST_OUTCOME_V1_NAMESPACE::monad_errc> : std::true_type
  {
  };
  //! \brief Tells the STL this is an error condition enum \ingroup monad
  template <> struct is_error_condition_enum<BOOST_OUTCOME_V1_NAMESPACE::monad_errc> : std::true_type
  {
  };
}
#endif

#endif
